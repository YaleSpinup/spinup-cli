This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-02-26T20:33:10.202Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  workflows/
    releaser.yml
    tests.yaml
  dependabot.yml
cli/
  configure.go
  get_container.go
  get_database.go
  get_images.go
  get_secrets.go
  get_server.go
  get_space.go
  get_spaces.go
  get_storage.go
  get.go
  helpers.go
  new.go
  root.go
  update_container.go
  update_server.go
  update_storage.go
  update.go
  version.go
cmd/
  spinup-cli/
    main.go
pkg/
  spinup/
    container.go
    database.go
    image.go
    offering.go
    resource.go
    secret.go
    server.go
    size.go
    space_test.go
    space.go
    spinup_test.go
    spinup.go
    storage.go
.gitignore
.goreleaser.yml
go.mod
go.sum
LICENSE
README.md

================================================================
Repository Files
================================================================

================
File: .github/workflows/releaser.yml
================
name: goreleaser

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set Up Go 1.21.x
        uses: actions/setup-go@v5
        with:
          go-version: 1.21
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf
        with:
          distribution: goreleaser
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.GORELEASER_GITHUB_TOKEN }}

================
File: .github/workflows/tests.yaml
================
name: tests
permissions:
  contents: read
  pull-requests: write
on:
  push:

jobs:
  tests-off:
    name: ${{ matrix.os }} - Go v${{ matrix.go-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version:
          - "1.21.x"
        os:
          - "ubuntu-latest"
          - "macos-latest"
          - "windows-latest"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Test
        run: |
          go mod tidy -v
          go test -cover  ./...

================
File: .github/dependabot.yml
================
# To get started with Dependabot version updates, you'll need to specify which
# package ecosystems to update and where the package manifests are located.
# Please see the documentation for all configuration options:
# https://docs.github.com/github/administering-a-repository/configuration-options-for-dependency-updates

version: 2
updates:
  - package-ecosystem: "gomod" # See documentation for possible values
    directory: "/" # Location of package manifests
    schedule:
      interval: "weekly"
  - package-ecosystem: "github-actions"
    directory: "/" # Location of package manifests
    schedule:
      interval: "weekly"

================
File: cli/configure.go
================
package cli

import (
	"fmt"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"

	log "github.com/sirupsen/logrus"
)

var show bool

func init() {
	rootCmd.AddCommand(configureCmd)
	configureCmd.Flags().BoolVar(&show, "show", false, "Display the current configurations")
}

var configureCmd = &cobra.Command{
	Use:     "configure",
	Aliases: []string{"config"},
	Short:   "Configure Spinup CLI",
	RunE: func(cmd *cobra.Command, args []string) error {
		log.Debug("Configuring...")

		if show {
			for k, v := range viper.AllSettings() {
				fmt.Printf("%s:\t%+v\n", k, v)
			}
			return nil
		}

		var url, token, spaces string

		fmt.Printf("URL [%s]: ", spinupURL)
		fmt.Scanln(&url)
		if url == "" {
			url = spinupURL
		}
		viper.Set("url", url)

		fmt.Printf("Token [%s]: ", spinupToken)
		fmt.Scanln(&token)
		if token == "" {
			token = spinupToken
		}
		viper.Set("token", token)

		fmt.Printf("Spaces [%s]: ", strings.Join(spinupSpaces, ","))
		fmt.Scanln(&spaces)
		if spaces == "" {
			spaces = strings.Join(spinupSpaces, ",")
		}

		spaceNames := strings.Split(spaces, ",")
		if spaces != "" {
			viper.Set("spaces", spaceNames)
		} else {
			viper.Set("spaces", []string{})
		}

		log.Debugf("setting url %s, token %s, and spaces %+v", url, token, spaces)

		if err := viper.WriteConfig(); err != nil {
			return err
		}

		return nil
	},
}

================
File: cli/get_container.go
================
package cli

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	"github.com/spf13/cobra"

	log "github.com/sirupsen/logrus"
)

var containerEventsCmd bool
var containerTaskCmd bool

func init() {
	getCmd.AddCommand(getContainerCmd)
	getContainerCmd.PersistentFlags().BoolVar(&containerEventsCmd, "events", false, "Get container events")
	getContainerCmd.PersistentFlags().BoolVar(&containerTaskCmd, "tasks", false, "Get container tasks")
}

var getContainerCmd = &cobra.Command{
	Use:     "container [space]/[resource]",
	Short:   "Get a container service",
	PreRunE: getCmdPreRun,
	RunE: func(cmd *cobra.Command, args []string) error {
		log.Infof("update container: %+v", args)

		status := getResource.Status
		if status != "created" && status != "creating" && status != "deleting" {
			return ingStatus(getResource)
		}

		var err error
		var out []byte
		switch {
		case detailedGetCmd:
			if out, err = containerDetails(getParams, getResource); err != nil {
				return err
			}
		case containerEventsCmd:
			if out, err = containerEvents(getParams, getResource); err != nil {
				return err
			}
		case containerTaskCmd:
			if out, err = containerTasks(getParams, getResource); err != nil {
				return err
			}
		default:
			if out, err = container(getParams, getResource); err != nil {
				return err
			}
		}

		return formatOutput(out)
	},
}

func container(params map[string]string, resource *spinup.Resource) ([]byte, error) {
	size, err := SpinupClient.ContainerSize(resource.SizeID.String())
	if err != nil {
		return []byte{}, err
	}

	info := &spinup.ContainerService{}
	if err = SpinupClient.GetResource(params, info); err != nil {
		return []byte{}, err
	}

	return json.MarshalIndent(newResourceSummary(resource, size, info.Status), "", "  ")
}

func containerDetails(params map[string]string, resource *spinup.Resource) ([]byte, error) {
	size, err := SpinupClient.ContainerSize(resource.SizeID.String())
	if err != nil {
		return []byte{}, err
	}

	info := &spinup.ContainerService{}
	if err = SpinupClient.GetResource(params, info); err != nil {
		return []byte{}, err
	}

	log.Debugf("collected container info %+v", info)

	spot := false
	for _, c := range info.CapacityProviderStrategy {
		if c.CapacityProvider == "FARGATE_SPOT" {
			spot = true
			break
		}
	}

	log.Debugf("container service spot: %t", spot)

	secrets, err := spaceSecrets(params)
	if err != nil {
		return []byte{}, err
	}

	log.Debugf("collected space secrets %+v", secrets)

	type ContainerDefinition struct {
		Auth         bool                          `json:"auth"`
		Environment  map[string]string             `json:"env,omitempty"`
		HealthCheck  *spinup.ContainerHealthCheck  `json:"healthcheck,omitempty"`
		Image        string                        `json:"image"`
		MountPoints  []*spinup.ContainerMountPoint `json:"mountpoints,omitempty"`
		Name         string                        `json:"name"`
		PortMappings []string                      `json:"portMappings,omitempty"`
		Secrets      map[string]string             `json:"secrets,omitempty"`
	}

	cdefs := make([]*ContainerDefinition, 0, len(info.TaskDefinition.ContainerDefinitions))
	for _, cdef := range info.TaskDefinition.ContainerDefinitions {
		auth := false
		if cdef.RepositoryCredentials.CredentialsParameter != "" {
			auth = true
		}

		env, err := mapNameValueArray(cdef.Environment)
		if err != nil {
			return []byte{}, err
		}

		cSecrets := make(map[string]string)
		if len(cdef.Secrets) > 0 {
			// map the secrets for the container def
			cSecrets, err = mapNameValueFromArray(cdef.Secrets)
			if err != nil {
				return []byte{}, err
			}

			// if the ARN matches the value of the container secret, override the value with the spinup secret name
			for _, s := range secrets {
				for k, v := range cSecrets {
					if v == s.ARN {
						cSecrets[k] = s.Name
					}
				}
			}
		}

		portMappings := []string{}
		if cdef.PortMappings != nil {
			for _, p := range cdef.PortMappings {
				portMappings = append(portMappings, fmt.Sprintf("%d/%s", p.ContainerPort, p.Protocol))
			}
		}

		cdefs = append(cdefs, &ContainerDefinition{
			Auth:         auth,
			Environment:  env,
			HealthCheck:  cdef.HealthCheck,
			Image:        cdef.Image,
			MountPoints:  cdef.MountPoints,
			Name:         cdef.Name,
			PortMappings: portMappings,
			Secrets:      cSecrets,
		})
	}

	type ContainerVolume struct {
		Name      string `json:"name"`
		Type      string `json:"type"`
		NfsVolume string `json:"nfs_volume,omitempty"`
	}

	volumes := make([]*ContainerVolume, 0, len(info.TaskDefinition.Volumes))
	for _, volume := range info.TaskDefinition.Volumes {
		v := ContainerVolume{
			Name: volume.Name,
		}

		v.Type = "persistent"
		if volume.Host != nil {
			v.Type = "ephemeral"
		}

		// TODO determine spinup resource instead of FileSystemId
		if volume.EfsVolumeConfiguration != nil {
			v.NfsVolume = volume.EfsVolumeConfiguration.FileSystemId
		}

		volumes = append(volumes, &v)
	}

	type Details struct {
		Containers   []*ContainerDefinition `json:"containers"`
		DesiredCount int64                  `json:"desiredCount"`
		Endpoint     string                 `json:"endpoint"`
		PendingCount int64                  `json:"pendingCount"`
		RunningCount int64                  `json:"runningCount"`
		Spot         bool                   `json:"spot"`
		Volumes      []*ContainerVolume     `json:"volumes"`
	}

	output := struct {
		*ResourceSummary
		Details *Details `json:"details"`
	}{
		newResourceSummary(resource, size, info.Status),
		&Details{
			Containers:   cdefs,
			DesiredCount: info.DesiredCount,
			Endpoint:     info.ServiceEndpoint,
			PendingCount: info.PendingCount,
			RunningCount: info.RunningCount,
			Spot:         spot,
			Volumes:      volumes,
		},
	}

	j, err := json.MarshalIndent(output, "", "  ")
	if err != nil {
		return []byte{}, err
	}

	return j, nil
}

func containerEvents(params map[string]string, resource *spinup.Resource) ([]byte, error) {
	info := &spinup.ContainerService{}
	if err := SpinupClient.GetResource(params, info); err != nil {
		return []byte{}, err
	}

	log.Debugf("%+v", info)

	type Event struct {
		CreatedAt string `json:"createdAt"`
		Id        string `json:"id"`
		Message   string `json:"message"`
	}

	events := make([]*Event, 0, len(info.Events))
	for i := len(info.Events) - 1; i >= 0; i-- {
		e := info.Events[i]
		events = append(events, &Event{
			CreatedAt: e.CreatedAt,
			Id:        e.ID,
			Message:   e.Message,
		})
	}

	output := struct {
		Events []*Event `json:"events"`
	}{events}

	j, err := json.MarshalIndent(output, "", "  ")
	if err != nil {
		return []byte{}, err
	}

	return j, nil
}

func containerTasks(params map[string]string, resource *spinup.Resource) ([]byte, error) {
	info := &spinup.ContainerService{}
	if err := SpinupClient.GetResource(params, info); err != nil {
		return []byte{}, err
	}

	log.Debugf("%+v", info)

	type Container struct {
		ExitCode     string `json:"exitCode"`
		HealthStatus string `json:"healthStatus"`
		Image        string `json:"image"`
		LastStatus   string `json:"lastStatus"`
		Name         string `json:"name"`
		Reason       string `json:"reason"`
	}

	type Task struct {
		AvailabilityZone string       `json:"availabilityZone"`
		CapacityProvider string       `json:"capacityProvider"`
		CPU              string       `json:"cpu"`
		CreatedAt        string       `json:"createdAt"`
		Id               string       `json:"id"`
		IpAddress        string       `json:"ipAddress"`
		LastStatus       string       `json:"lastStatus"`
		LaunchType       string       `json:"launchType"`
		Memory           string       `json:"memory"`
		PlatformVersion  string       `json:"platformVersion"`
		PullStartedAt    string       `json:"pullStartedAt"`
		PullStoppedAt    string       `json:"pullStoppedAt"`
		StopCode         string       `json:"stopCode"`
		StoppedAt        string       `json:"stoppedAt"`
		StoppedReason    string       `json:"stoppedReason"`
		StoppingAt       string       `json:"stoppingAt"`
		Containers       []*Container `json:"containers"`
		Version          int64        `json:"version"`
	}

	tasks := make([]*Task, 0, len(info.Tasks))
	for _, t := range info.Tasks {
		tid := strings.SplitN(t, "/", 2)
		params["taskId"] = tid[1]
		taskOut := &spinup.ContainerTask{}
		if err := SpinupClient.GetResource(params, taskOut); err != nil {
			return []byte{}, err
		}

		for _, task := range taskOut.Tasks {
			var ip string
			for _, a := range task.Attachments {
				if a.Type == "ElasticNetworkInterface" {
					for _, nv := range a.Details {
						if nv.Name == "privateIPv4Address" {
							ip = nv.Value
						}
					}
				}
			}

			containers := make([]*Container, 0, len(task.Containers))
			for _, c := range task.Containers {
				containers = append(containers, &Container{
					ExitCode:     c.ExitCode,
					HealthStatus: c.HealthStatus,
					Image:        c.Image,
					LastStatus:   c.LastStatus,
					Name:         c.Name,
					Reason:       c.Reason,
				})
			}

			tasks = append(tasks, &Task{
				AvailabilityZone: task.AvailabilityZone,
				CapacityProvider: task.CapacityProviderName,
				CPU:              task.Cpu,
				CreatedAt:        task.CreatedAt,
				Id:               tid[1],
				IpAddress:        ip,
				LastStatus:       task.LastStatus,
				LaunchType:       task.LaunchType,
				Memory:           task.Memory,
				PlatformVersion:  task.PlatformVersion,
				PullStartedAt:    task.PullStartedAt,
				PullStoppedAt:    task.PullStoppedAt,
				StopCode:         task.StopCode,
				StoppedAt:        task.StoppedAt,
				StoppedReason:    task.StoppedReason,
				StoppingAt:       task.StoppingAt,
				Containers:       containers,
				Version:          task.Version,
			})
		}
	}

	output := struct {
		Tasks []*Task `json:"tasks"`
	}{
		tasks,
	}

	j, err := json.MarshalIndent(output, "", "  ")
	if err != nil {
		return []byte{}, err
	}

	return j, nil
}

================
File: cli/get_database.go
================
package cli

import (
	"encoding/json"
	"fmt"
	"strconv"
	"strings"

	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

func init() {
	getCmd.AddCommand(getDatabaseCmd)
}

var getDatabaseCmd = &cobra.Command{
	Use:     "database [space]/[name]",
	Short:   "Get a container service",
	PreRunE: getCmdPreRun,
	RunE: func(cmd *cobra.Command, args []string) error {
		log.Infof("get database: %+v", args)

		status := getResource.Status
		if status != "created" && status != "creating" && status != "deleting" {
			return ingStatus(getResource)
		}

		var err error
		var out []byte
		switch {
		case detailedGetCmd:
			if out, err = databaseDetails(getParams, getResource); err != nil {
				return err
			}
		default:
			if out, err = database(getParams, getResource); err != nil {
				return err
			}
		}

		return formatOutput(out)
	},
}

func database(params map[string]string, resource *spinup.Resource) ([]byte, error) {
	size, err := SpinupClient.DatabaseSize(resource.SizeID.String())
	if err != nil {
		return []byte{}, err
	}

	info := &spinup.DatabaseInfo{}
	if err := SpinupClient.GetResource(params, info); err != nil {
		return []byte{}, err
	}

	status := resource.Status
	if len(info.DBClusters) > 0 {
		status = info.DBClusters[0].Status
		if info.DBClusters[0].EngineMode == "serverless" && info.DBClusters[0].Capacity == 0 {
			status = "paused"
		}
	} else if len(info.DBInstances) > 0 {
		status = info.DBInstances[0].DBInstanceStatus
	}

	return json.MarshalIndent(newResourceSummary(resource, size, status), "", "  ")
}

func databaseDetails(params map[string]string, resource *spinup.Resource) ([]byte, error) {
	size, err := SpinupClient.DatabaseSize(resource.SizeID.String())
	if err != nil {
		return []byte{}, err
	}

	info := &spinup.DatabaseInfo{}
	if err := SpinupClient.GetResource(params, info); err != nil {
		return []byte{}, err
	}

	// I think we only ever have one cluster and instance (even in multi-az deployments)
	var cluster *spinup.DBCluster
	if len(info.DBClusters) > 0 {
		cluster = info.DBClusters[0]
	}

	var instance *spinup.DBInstance
	if len(info.DBInstances) > 0 {
		instance = info.DBInstances[0]
	}

	type DBDetails struct {
		AutoMinorVersionUpgrade bool   `json:"autoMinorVersionUpgrade"`
		CreatedAt               string `json:"createdAt"`
		Engine                  string `json:"engine"`
		EngineVersion           string `json:"engineVersion"`
		MasterUsername          string `json:"masterUsername"`
		BackupRetentionPeriod   int64  `json:"backupRetentionPeriod"`
		BackupWindow            string `json:"backupWindow"`
		MaintenanceWindow       string `json:"maintenanceWindow"`
		Port                    int64  `json:"port"`
		Endpoint                string `json:"endpoint"`
		Encrypted               bool   `json:"encrypted"`
	}

	type ServerlessDetails struct {
		*DBDetails
		AutoPauseEnabled       bool   `json:"autoPauseEnabled"`
		EarliestRestorableTime string `json:"earliestRestorableTime"`
		EngineMode             string `json:"engineMode"`
		LatestRestorableTime   string `json:"latestRestorableTime"`
		CurrentCapacity        int64  `json:"currentCapacity"`
		MaxCapacity            int64  `json:"maxCapacity"`
		MinCapacity            int64  `json:"minCapacity"`
		SecondsToAutoPause     int64  `json:"secondsToAutoPause"`
	}

	type ProvisionedDetails struct {
		*DBDetails
		EarliestRestorableTime string `json:"earliestRestorableTime"`
		EngineMode             string `json:"engineMode"`
		LatestRestorableTime   string `json:"latestRestorableTime"`
		Size                   string `json:"size"`
	}

	type InstanceDetails struct {
		*DBDetails
		AllocatedStorage int64  `json:"allocatedStorage"`
		MultiAZ          bool   `json:"multiAZ"`
		Size             string `json:"size"`
	}

	var status string
	var details interface{}
	if cluster != nil {
		status = cluster.Status

		dbd := &DBDetails{
			AutoMinorVersionUpgrade: cluster.AutoMinorVersionUpgrade,
			CreatedAt:               cluster.ClusterCreateTime,
			Engine:                  cluster.Engine,
			EngineVersion:           cluster.EngineVersion,
			MasterUsername:          cluster.MasterUsername,
			BackupRetentionPeriod:   cluster.BackupRetentionPeriod,
			BackupWindow:            cluster.PreferredBackupWindow,
			MaintenanceWindow:       cluster.PreferredMaintenanceWindow,
			Endpoint:                cluster.Endpoint,
			Encrypted:               cluster.StorageEncrypted,
			Port:                    cluster.Port,
		}

		if cluster.EngineMode == "serverless" {
			if cluster.Capacity == 0 {
				status = "paused"
			}

			details = &ServerlessDetails{
				dbd,
				cluster.ScalingConfigurationInfo.AutoPause,
				cluster.EarliestRestorableTime,
				cluster.EngineMode,
				cluster.LatestRestorableTime,
				cluster.Capacity,
				cluster.ScalingConfigurationInfo.MaxCapacity,
				cluster.ScalingConfigurationInfo.MinCapacity,
				cluster.ScalingConfigurationInfo.SecondsUntilAutoPause,
			}
		} else {
			s := size.Name
			if instance != nil {
				s = instance.DBInstanceClass
			}

			details = &ProvisionedDetails{
				dbd,
				cluster.EarliestRestorableTime,
				cluster.EngineMode,
				cluster.LatestRestorableTime,
				s,
			}
		}
	} else if instance != nil {
		status = instance.DBInstanceStatus

		dbd := &DBDetails{
			AutoMinorVersionUpgrade: instance.AutoMinorVersionUpgrade,
			CreatedAt:               instance.InstanceCreateTime,
			Endpoint:                instance.Endpoint.Address,
			Engine:                  instance.Engine,
			EngineVersion:           instance.EngineVersion,
			MasterUsername:          instance.MasterUsername,
			BackupRetentionPeriod:   instance.BackupRetentionPeriod,
			BackupWindow:            instance.PreferredBackupWindow,
			MaintenanceWindow:       instance.PreferredMaintenanceWindow,
			Encrypted:               instance.StorageEncrypted,
			Port:                    instance.Endpoint.Port,
		}

		details = &InstanceDetails{
			dbd,
			instance.AllocatedStorage,
			instance.MultiAZ,
			instance.DBInstanceClass,
		}

	} else {
		// else assume its a shared mysql database

		e := strings.SplitN(info.Endpoint, ":", 2)
		endpoint := e[0]

		var port int64
		if len(e) == 2 {
			p, err := strconv.ParseInt(e[1], 10, 64)
			if err != nil {
				return nil, fmt.Errorf("failed to parse %s as int: %s", e[1], err)
			}
			port = p
		}

		details = struct {
			Endpoint       string `json:"endpoint"`
			Port           int64  `json:"port"`
			MasterUsername string `json:"masterUsername"`
		}{Endpoint: endpoint, Port: port, MasterUsername: resource.Name}
	}

	output := struct {
		*ResourceSummary
		Details interface{} `json:"details"`
	}{
		newResourceSummary(resource, size, status),
		details,
	}

	j, err := json.MarshalIndent(output, "", "  ")
	if err != nil {
		return []byte{}, err
	}

	return j, nil
}

================
File: cli/get_images.go
================
package cli

import (
	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

func init() {
	getCmd.AddCommand(getImagesCmd)
}

var getImagesCmd = &cobra.Command{
	Use:     "images [space]",
	Short:   "Get a list of images for a space",
	PreRunE: getSpaceLevelCmdPreRun,
	RunE: func(cmd *cobra.Command, args []string) error {
		log.Infof("get images: %+v", args)

		type ImageOutput struct {
			*spinup.Image
			OfferingName string `json:"offering_name"`
			Space        string `json:"space"`
		}

		images := spinup.Images{}
		if err := SpinupClient.GetResource(getParams, &images); err != nil {
			return err
		}

		out := []*ImageOutput{}
		for _, i := range []*spinup.Image(images) {
			oName := i.Offering.Name
			i.Offering = nil
			oOutput := ImageOutput{i, oName, getParams["space"]}
			out = append(out, &oOutput)
		}

		return formatOutput(out)
	},
}

================
File: cli/get_secrets.go
================
package cli

import (
	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

func init() {
	getCmd.AddCommand(getSecretsCmd)
}

var getSecretsCmd = &cobra.Command{
	Use:     "secrets [space]",
	Short:   "Get a list of secrets for a space",
	PreRunE: getSpaceLevelCmdPreRun,
	RunE: func(cmd *cobra.Command, args []string) error {
		log.Infof("get secrets: %+v", args)

		type SecretOutput struct {
			Name        string `json:"name"`
			Description string `json:"description"`
			Space       string `json:"space"`
		}

		out := []*SecretOutput{}
		secrets, err := spaceSecrets(getParams)
		if err != nil {
			return err
		}

		for _, secret := range secrets {
			out = append(out, &SecretOutput{
				Name:        secret.Name,
				Description: secret.Description,
				Space:       getParams["space"],
			})
		}
		return formatOutput(out)
	},
}

func spaceSecrets(params map[string]string) ([]*spinup.Secret, error) {
	// collect a list of secrets from the space
	secrets := &spinup.Secrets{}
	if err := SpinupClient.GetResource(params, secrets); err != nil {
		return nil, err
	}

	log.Debugf("got list of secrets in space %+v", secrets)

	// get details about each secret (necessary to map the ARN to the name)
	spaceSecrets := []*spinup.Secret{}
	for _, s := range *secrets {
		secret := &spinup.Secret{}
		if err := SpinupClient.GetResource(
			map[string]string{
				"space":      params["space"],
				"secretname": string(s),
			}, secret); err != nil {
			return nil, err
		}
		spaceSecrets = append(spaceSecrets, secret)
	}

	return spaceSecrets, nil
}

================
File: cli/get_server.go
================
package cli

import (
	"encoding/json"

	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

func init() {
	getCmd.AddCommand(getServerCmd)
}

var getServerCmd = &cobra.Command{
	Use:     "server [space][resource]",
	Short:   "Get a server service",
	PreRunE: getCmdPreRun,
	RunE: func(cmd *cobra.Command, args []string) error {
		log.Infof("get server: %+v", args)

		status := getResource.Status
		if status != "created" && status != "creating" && status != "deleting" {
			return ingStatus(getResource)
		}

		var err error
		var out []byte
		switch {
		case detailedGetCmd:
			if out, err = serverDetails(getParams, getResource); err != nil {
				return err
			}
		default:
			if out, err = server(getParams, getResource); err != nil {
				return err
			}
		}

		return formatOutput(out)
	},
}

func server(params map[string]string, resource *spinup.Resource) ([]byte, error) {
	size, err := SpinupClient.ServerSize(resource.SizeID.String())
	if err != nil {
		return []byte{}, err
	}

	log.Debugf("collected server size: %+v", size)

	info := &spinup.ServerInfo{}
	if err := SpinupClient.GetResource(params, info); err != nil {
		return []byte{}, err
	}

	log.Debugf("collected server info: %+v", info)

	return json.MarshalIndent(newResourceSummary(resource, size, info.State), "", "  ")
}

func serverDetails(params map[string]string, resource *spinup.Resource) ([]byte, error) {
	size, err := SpinupClient.ServerSize(resource.SizeID.String())
	if err != nil {
		return []byte{}, err
	}

	log.Debugf("collected server size: %+v", size)

	info := &spinup.ServerInfo{}
	if err := SpinupClient.GetResource(params, info); err != nil {
		return []byte{}, err
	}

	log.Debugf("collected server info: %+v", info)

	disks := spinup.Disks{}
	if err := SpinupClient.GetResource(params, &disks); err != nil {
		return []byte{}, err
	}

	log.Debugf("collected server disks: %+v", disks)

	snapshots := spinup.Snapshots{}
	if err := SpinupClient.GetResource(params, &snapshots); err != nil {
		return []byte{}, err
	}

	log.Debugf("collected server snapshots: %+v", snapshots)

	sgs := make([]string, 0, len(info.SecurityGroups))
	for _, s := range info.SecurityGroups {
		for k := range s {
			sgs = append(sgs, k)
		}
	}

	type InstanceVolume struct {
		spinup.Disk
		Snapshots []*spinup.Snapshot `json:"snapshots,omitempty"`
	}

	type Details struct {
		AvailabilityZone string            `json:"availability_zone"`
		Disks            []*InstanceVolume `json:"disks"`
		ID               string            `json:"instance_id"`
		Image            string            `json:"image"`
		IP               string            `json:"ip"`
		SecurityGroups   []string          `json:"security_groups"`
		State            string            `json:"state"`
		Subnet           string            `json:"subnet"`
		InstanceType     string            `json:"instance_type"`
	}

	instanceDisks := []*InstanceVolume{}
	for _, d := range disks {
		volumeSnapshots := []*spinup.Snapshot{}

		for _, s := range snapshots {
			if s.VolumeID == d.ID {
				volumeSnapshots = append(volumeSnapshots, s)
			}
		}

		instanceDisks = append(instanceDisks, &InstanceVolume{
			spinup.Disk{
				ID:          d.ID,
				CreatedAt:   d.CreatedAt,
				Encrypted:   d.Encrypted,
				Size:        d.Size,
				VolumeType:  d.VolumeType,
				Attachments: d.Attachments,
			},
			volumeSnapshots,
		})
	}

	output := struct {
		*ResourceSummary
		Details *Details `json:"details"`
	}{
		newResourceSummary(resource, size, resource.Status),
		&Details{
			AvailabilityZone: info.AvailabilityZone,
			Disks:            instanceDisks,
			ID:               info.ID,
			Image:            info.Image,
			IP:               info.IP,
			SecurityGroups:   sgs,
			State:            info.State,
			Subnet:           info.Subnet,
			InstanceType:     info.Type,
		},
	}

	j, err := json.MarshalIndent(output, "", "  ")
	if err != nil {
		return []byte{}, err
	}

	return j, nil
}

================
File: cli/get_space.go
================
package cli

import (
	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

type SpaceOutput struct {
	*spinup.Space
	Resources []*spinup.Resource `json:",omitempty"`
}

var (
	includeCost         bool
	showFailedResources bool
	showResources       bool
)

func init() {
	getCmd.AddCommand(getSpaceCmd)
	getSpaceCmd.PersistentFlags().BoolVarP(&includeCost, "cost", "c", false, "Query for cost (where available)")
	getSpaceCmd.PersistentFlags().BoolVar(&showResources, "resources", false, "Show resources")
	getSpaceCmd.PersistentFlags().BoolVar(&showFailedResources, "failed", false, "Also show failed resources")
}

var getSpaceCmd = &cobra.Command{
	Use:   "space",
	Short: "Get details about your space(s)",
	RunE: func(cmd *cobra.Command, args []string) error {
		spaces, err := parseSpaceInput(args)
		if err != nil {
			return err
		}

		log.Debugf("getting space(s) '%+v'", spaces)

		output := map[string]SpaceOutput{}
		for _, s := range spaces {
			params := map[string]string{"id": s}
			space := &spinup.GetSpace{}
			if err := SpinupClient.GetResource(params, space); err != nil {
				return err
			}

			if includeCost {
				cost := &spinup.SpaceCosts{}
				if err := SpinupClient.GetResource(params, cost); err != nil {
					return err
				}
				space.Space.Cost = cost
			}

			var resourcesOut []*spinup.Resource
			if showResources {
				resources, err := SpinupClient.Resources(s)
				if err != nil {
					return err
				}

				for _, r := range resources {
					r.TypeName = r.Type.Name
					r.TypeCat = r.Type.Type
					r.TypeFlavor = r.Type.Flavor
					r.SizeID = nil
					r.IsA = ""
					r.Type = nil

					if showFailedResources || r.Status != "failed" {
						resourcesOut = append(resourcesOut, r)
					}
				}
			}

			out := SpaceOutput{space.Space, resourcesOut}
			output[space.Space.Name] = out
		}

		return formatOutput(output)
	},
}

================
File: cli/get_spaces.go
================
package cli

import (
	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

type SpacesOutput struct {
	*spinup.Space
	ResourceCount int `json:"resource_count"`
}

func init() {
	getCmd.AddCommand(getSpacesCmd)
	getSpacesCmd.PersistentFlags().BoolVarP(&includeCost, "cost", "c", false, "Query for cost (where available)")
}

var getSpacesCmd = &cobra.Command{
	Use:   "spaces",
	Short: "Get a list of your space(s)",
	RunE: func(cmd *cobra.Command, args []string) error {
		log.Debug("getting all spaces")

		spaces := spinup.Spaces{}
		if err := SpinupClient.GetResource(map[string]string{}, &spaces); err != nil {
			return err
		}

		if includeCost {
			for _, s := range spaces.Spaces {
				spaceCost := &spinup.SpaceCosts{}
				if err := SpinupClient.GetResource(map[string]string{"id": s.Id.String()}, spaceCost); err != nil {
					return err
				}

				s.Cost = spaceCost
			}
		}

		out := []SpacesOutput{}
		for _, s := range spaces.Spaces {
			o := SpacesOutput{s, len(s.Resources)}
			o.Resources = nil
			out = append(out, o)
		}

		return formatOutput(out)
	},
}

================
File: cli/get_storage.go
================
package cli

import (
	"encoding/json"
	"fmt"

	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

func init() {
	getCmd.AddCommand(getStorageCmd)
}

var getStorageCmd = &cobra.Command{
	Use:     "storage [space]/[resource]",
	Short:   "Get a storage service",
	PreRunE: getCmdPreRun,
	RunE: func(cmd *cobra.Command, args []string) error {
		log.Infof("get storage: %+v", args)

		status := getResource.Status
		if status != "created" && status != "creating" && status != "deleting" {
			return ingStatus(getResource)
		}

		var out []byte
		var err error
		switch {
		case detailedGetCmd:
			switch getResource.Type.Flavor {
			case "s3", "s3bucket":
				out, err = s3StorageDetails(getParams, getResource)
				if err != nil {
					return err
				}
			case "efs":
				log.Warn("efs is not supported yet")
				return nil
			default:
				return fmt.Errorf("unknown flavor: %s", getResource.Type.Flavor)
			}
		default:
			switch getResource.Type.Flavor {
			case "s3", "s3bucket":
				out, err = s3Storage(getParams, getResource)
				if err != nil {
					return err
				}
			case "efs":
				log.Warn("efs is not supported yet")
				return nil
			default:
				return fmt.Errorf("unknown flavor: %s", getResource.Type.Flavor)
			}
		}

		return formatOutput(out)
	},
}

func s3Storage(params map[string]string, resource *spinup.Resource) ([]byte, error) {
	size, err := SpinupClient.S3StorageSize(resource.SizeID.String())
	if err != nil {
		return []byte{}, err
	}

	info := &spinup.S3StorageInfo{}
	if err := SpinupClient.GetResource(params, resource); err != nil {
		return []byte{}, err
	}

	state := "populated"
	if info.Empty {
		state = "empty"
	}

	return json.MarshalIndent(newResourceSummary(resource, size, state), "", "  ")
}

func s3StorageDetails(params map[string]string, resource *spinup.Resource) ([]byte, error) {
	size, err := SpinupClient.S3StorageSize(resource.SizeID.String())
	if err != nil {
		return []byte{}, err
	}

	info := &spinup.S3StorageInfo{}
	if err := SpinupClient.GetResource(params, resource); err != nil {
		return []byte{}, err
	}

	users := spinup.S3StorageUsers{}
	if err := SpinupClient.GetResource(params, &users); err != nil {
		return []byte{}, err
	}

	state := "populated"
	if info.Empty {
		state = "empty"
	}

	type User struct {
		Username  string   `json:"username"`
		CreatedAt string   `json:"created_at"`
		LastUsed  string   `json:"last_used"`
		Keys      []string `json:"key_id"`
	}

	userList := []*User{}
	for _, u := range users {
		params["username"] = u.Username
		user := spinup.S3StorageUser{}
		if err = SpinupClient.GetResource(params, &user); err != nil {
			return []byte{}, err
		}

		keys := make([]string, 0, len(user.AccessKeys))
		for _, k := range user.AccessKeys {
			keys = append(keys, k.AccessKeyId)
		}

		userList = append(userList, &User{
			Username:  u.Username,
			CreatedAt: u.CreatedAt,
			LastUsed:  u.LastUsed,
			Keys:      keys,
		})
	}

	output := struct {
		*ResourceSummary
		Empty bool    `json:"empty"`
		Users []*User `json:"users"`
	}{
		newResourceSummary(resource, size, state),
		info.Empty,
		userList,
	}

	j, err := json.MarshalIndent(output, "", "  ")
	if err != nil {
		return []byte{}, err
	}

	return j, nil
}

================
File: cli/get.go
================
package cli

import (
	"errors"
	"strings"
	"time"

	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

var detailedGetCmd bool

func init() {
	rootCmd.AddCommand(getCmd)
	getCmd.PersistentFlags().BoolVarP(&detailedGetCmd, "details", "d", false, "Get detailed output about the resource")
}

var (
	getParams   = map[string]string{}
	getResource = &spinup.Resource{}
)

func getCmdPreRun(cmd *cobra.Command, args []string) error {
	defer timeTrack(time.Now(), "getCmdPreRun()")

	if len(args) == 0 {
		return errors.New("space/resource required")
	}

	parts := strings.Split(args[0], "/")
	switch len(parts) {
	case 2:
		getParams["space"] = parts[0]
		getParams["name"] = parts[1]
	case 1:
		log.Debug("space not found in input, finding resource in default spaces")

		if len(spinupSpaces) == 0 {
			return errors.New("space not passed and no default spaces found")
		}

		space, err := findResourceInSpaces(parts[0], spinupSpaces)
		if err != nil {
			return err
		}

		getParams["space"] = space
		getParams["name"] = parts[0]
	default:
		return errors.New("space/resource required")
	}

	// set the global getResource to the passed resource
	if err := SpinupClient.GetResource(getParams, getResource); err != nil {
		return err
	}

	return nil
}

func getSpaceLevelCmdPreRun(cmd *cobra.Command, args []string) error {
	defer timeTrack(time.Now(), "getSpaceLevelCmdPreRun()")

	if len(args) == 0 {
		return errors.New("space required")
	}

	getParams["space"] = args[0]

	return nil
}

var getCmd = &cobra.Command{
	Use:   "get [type] [space]/[resource]",
	Short: "Get information about a resource in a space",
}

================
File: cli/helpers.go
================
package cli

import (
	"bufio"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/http/cookiejar"
	"os"
	"strings"
	"time"

	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	log "github.com/sirupsen/logrus"
	"golang.org/x/net/publicsuffix"
)

type ResourceSummary struct {
	ID       string `json:"id"`
	IP       string `json:"ip,omitempty"`
	Name     string `json:"name"`
	Status   string `json:"status"`
	Type     string `json:"type"`
	Flavor   string `json:"flavor"`
	Security string `json:"security"`
	SpaceID  string `json:"space_id,omitempty"`
	Beta     bool   `json:"beta"`
	Size     string `json:"size"`
	TryIT    bool   `json:"tryit"`
	State    string `json:"state,omitempty"`
}

func initClient() error {
	defer timeTrack(time.Now(), "initClient()")

	if err := validateToken(spinupToken); err != nil {
		return err
	}

	jar, err := cookiejar.New(&cookiejar.Options{PublicSuffixList: publicsuffix.List})
	if err != nil {
		return err
	}

	httpClient := &http.Client{
		Jar:     jar,
		Timeout: 30 * time.Second,
	}

	s, err := spinup.New(spinupURL, httpClient, spinupToken)
	if err != nil {
		return err
	}

	SpinupClient = s

	return nil
}

// parseSpaceInput takes a list of space arguments and parses them into space ids, converting from
// names to IDs where necessary
func parseSpaceInput(args []string) ([]string, error) {
	log.Debugf("parsing space input args %+v", args)

	var spaceNames []string
	if len(args) > 0 {
		spaceNames = args
	} else if len(spinupSpaces) > 0 {
		spaceNames = spinupSpaces
	} else {
		return nil, errors.New("spaceid(s) or space name(s) required")
	}

	return spaceNames, nil
}

// findResourceInSpaces returns the space for the given resource, searching the spaces passed in the space list
func findResourceInSpaces(name string, spaces []string) (string, error) {
	log.Debugf("finding %s in spaces %+v", name, spaces)

	for _, s := range spinupSpaces {
		log.Debugf("listing resources for space %s", s)

		resources, err := SpinupClient.Resources(s)
		if err != nil {
			return "", err
		}

		for _, r := range resources {
			if r.Name == name {
				return s, nil
			}
		}
	}

	return "", fmt.Errorf("resource %s not found in any spaces", name)
}

// ingStatus prints the basic information about a resource and returns.
func ingStatus(resource *spinup.Resource) error {
	out, err := json.MarshalIndent(struct {
		ID      string `json:"id"`
		Name    string `json:"name"`
		Status  string `json:"status"`
		SpaceID string `json:"space_id"`
	}{
		ID:      resource.ID.String(),
		Name:    resource.Name,
		Status:  resource.Status,
		SpaceID: resource.SpaceID.String(),
	}, "", "  ")
	if err != nil {
		return err
	}

	f := bufio.NewWriter(os.Stdout)
	defer f.Flush()
	f.Write(out)

	return nil
}

func newResourceSummary(resource *spinup.Resource, size spinup.Size, state string) *ResourceSummary {
	tryit := false
	if size.GetPrice() == "tryit" {
		tryit = true
	}

	return &ResourceSummary{
		ID:       resource.ID.String(),
		IP:       resource.IP,
		Name:     resource.Name,
		Status:   resource.Status,
		Type:     resource.Type.Name,
		Flavor:   resource.Type.Flavor,
		Security: resource.Type.Security,
		Size:     size.GetName(),
		// SpaceID:  resource.SpaceID.String(),
		Beta:  resource.Type.Beta.Bool(),
		TryIT: tryit,
		State: state,
	}
}

// mapNameValueArray maps the ubiquitous Name Value array into a key:value map
func mapNameValueArray(input []*spinup.NameValue) (map[string]string, error) {
	output := map[string]string{}
	for _, s := range input {
		if _, ok := output[s.Name]; ok {
			return nil, fmt.Errorf("name collision mapping name value: %s", s.Name)
		}
		output[s.Name] = s.Value
	}
	return output, nil
}

// mapNameValueArray maps the ubiquitous Name Value array into a key:value map
func mapNameValueFromArray(input []*spinup.NameValueFrom) (map[string]string, error) {
	output := map[string]string{}
	for _, s := range input {
		if _, ok := output[s.Name]; ok {
			return nil, fmt.Errorf("name collision mapping name valuefrom: %s", s.Name)
		}
		output[s.Name] = s.ValueFrom
	}
	return output, nil
}

// formatOutput prints the output as json or a string
func formatOutput(out interface{}) error {
	var output []byte
	o, ok := out.([]byte)
	if ok {
		output = o
	} else {
		var err error
		output, err = json.MarshalIndent(out, "", "  ")
		if err != nil {
			return err
		}
	}

	f := bufio.NewWriter(os.Stdout)
	defer f.Flush()
	if _, err := f.Write(output); err != nil {
		return err
	}

	return nil
}

func validateToken(tokenString string) error {
	defer timeTrack(time.Now(), "validateToken()")

	if tokenString == "" {
		log.Debug("no token provided")
		return nil
	}

	log.Debugf("validating token: %s", tokenString)

	parts := strings.SplitN(tokenString, ".", 3)
	if l := len(parts); l != 3 {
		return fmt.Errorf("invalid token, unexpected number of parts (%d)", l)
	}

	rawPayload, err := base64.RawStdEncoding.DecodeString(parts[1])
	if err != nil {
		return fmt.Errorf("invalid token, unable to decode payload: %s", err)
	}

	log.Debugf("got payload: %s", string(rawPayload))

	var payload map[string]interface{}
	if err := json.Unmarshal(rawPayload, &payload); err != nil {
		return fmt.Errorf("invalid token, unable to unmarshal payload: %s", err)
	}

	log.Debugf("unmarshalled payload: %+v", payload)

	exp, ok := payload["exp"].(float64)
	if !ok {
		return fmt.Errorf("invalid token, unable to parse expiration: %v", payload["exp"])
	}

	expirationTime := time.Unix(int64(exp), 0)
	if time.Now().After(expirationTime) {
		return fmt.Errorf("token is expired (%s)", expirationTime)
	}

	nbf, ok := payload["nbf"].(float64)
	if !ok {
		return fmt.Errorf("invalid token, unable to parse notbefore: %v", payload["nbf"])
	}

	notbeforeTime := time.Unix(int64(nbf), 0)
	if time.Now().Before(notbeforeTime) {
		return fmt.Errorf("token is not valid yet (%s)", notbeforeTime)
	}

	log.Debugf("token is valid (not before: %s, not after: %s", notbeforeTime, expirationTime)

	return nil
}

// timeTrack logs the time since the passed time
func timeTrack(start time.Time, name string) {
	elapsed := time.Since(start)
	log.Infof("%s took %s", name, elapsed)
}

================
File: cli/new.go
================
package cli

import (
	"errors"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"

	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

var (
	secretName        string
	secretValue       string
	secretValueFrom   string
	secretDescription string
)

func init() {
	rootCmd.AddCommand(newCmd)
	newCmd.AddCommand(newSpaceCmd)
	newCmd.AddCommand(newSecretCmd)
	newSecretCmd.PersistentFlags().StringVar(&secretName, "name", "", "The name of your secret")
	newSecretCmd.PersistentFlags().StringVar(&secretValue, "value", "", "The value of your secret")
	newSecretCmd.PersistentFlags().StringVar(&secretDescription, "description", "", "A short description for your secret (optional)")
	newSecretCmd.PersistentFlags().StringVar(&secretValueFrom, "from", "", "A file containing your secret value")
}

var newCmd = &cobra.Command{
	Use:   "new",
	Short: "Create new resources",
}

var newSpaceCmd = &cobra.Command{
	Use:   "space",
	Short: "Command to create a space",
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("Creating spaces is not currently supported from the CLI, please use the web interface.")
	},
}

var newSecretCmd = &cobra.Command{
	Use:   "secret",
	Short: "Command to create a secret in a space",
	PreRunE: func(cmd *cobra.Command, args []string) error {
		if secretName == "" {
			return errors.New("a secret name is required")
		}

		if secretValue == "" && secretValueFrom == "" {
			return errors.New("a secret value or file is required")
		}

		if cmd.Flags().Changed("from") {
			secretPath := filepath.Clean(secretValueFrom)
			f, err := os.Open(secretPath)
			if err != nil {
				return err
			}
			defer f.Close()

			body, err := ioutil.ReadAll(f)
			if err != nil {
				return err
			}

			log.Debugf("size of body is %d byets", len(body))

			if len(body) > 4000 {
				return errors.New("File size is greater than 4KB")
			}

			secretValue = string(body)
		}

		return nil
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		log.Infof("creating secret %s:%s", secretName, secretValue)
		return nil
	},
}

================
File: cli/root.go
================
/*
Copyright © 2020 Yale University

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/
package cli

import (
	"fmt"
	"os"

	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"

	homedir "github.com/mitchellh/go-homedir"
	"github.com/spf13/viper"
)

var (
	cfgFile      string
	spinupURL    string
	spinupToken  string
	debug        bool
	verbose      bool
	SpinupClient *spinup.Client
	spinupSpaces []string
)

// rootCmd represents the base command when called without any subcommands, it propogates the configuration items from the config file.
var rootCmd = &cobra.Command{
	Use:   "spinup ",
	Short: "A small CLI for interacting with Yale's Spinup service",
	PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
		if debug {
			log.SetLevel(log.DebugLevel)
		} else if verbose {
			log.SetLevel(log.InfoLevel)
		} else {
			log.SetLevel(log.WarnLevel)
		}

		log.Debug("running root level prerun")

		spinupURL = viper.GetString("url")
		spinupToken = viper.GetString("token")
		spinupSpaces = viper.GetStringSlice("spaces")

		log.Debugf("command: %+v, args: %+v", cmd, args)

		called := cmd.CalledAs()
		if called != "version" && called != "help" && called != "configure" {
			log.Debug("initializaing client from execute()")

			if err := initClient(); err != nil {
				log.Fatalf("failed to create client: %s", err)
			}
		}

		return nil
	},
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	log.Debug("executing root command")
	if err := rootCmd.Execute(); err != nil {
		log.Fatalf("failed to execute command: %s", err)
	}
}

func init() {
	log.Debug("binding flags to variables")
	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.spinup.yaml)")
	rootCmd.PersistentFlags().StringVarP(&spinupURL, "url", "", "", "The base url for Spinup")
	rootCmd.PersistentFlags().StringVarP(&spinupToken, "token", "t", "", "Spinup API Token")
	rootCmd.PersistentFlags().BoolVarP(&debug, "debug", "", false, "Enable debug logging")
	rootCmd.PersistentFlags().BoolVarP(&verbose, "verbose", "v", false, "Enable verbose logging")
	rootCmd.PersistentFlags().StringSliceVarP(&spinupSpaces, "spaces", "s", nil, "Default Space(s)")

	log.Debug("viper binding flags")

	bflags := []string{
		"url",
		"token",
		"spaces",
	}

	for _, b := range bflags {
		if err := viper.BindPFlag(b, rootCmd.PersistentFlags().Lookup(b)); err != nil {
			log.Fatalf("failed to bind flags for %s: %s", b, err)
		}
	}

	log.Debug("initializing configuration")

	cobra.OnInitialize(initConfig)
}

// initConfig reads in config file and ENV variables if set.
func initConfig() {
	// Find home directory.
	home, err := homedir.Dir()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	if cfgFile != "" {
		log.Debugf("viper setconfigfile %s", cfgFile)
		// Use config file from the flag.
		viper.SetConfigFile(cfgFile)
	} else {
		log.Debug("finding default config file")

		// Search config in home directory with name ".spinup" (without extension).
		viper.AddConfigPath(home)
		viper.SetConfigName(".spinup")
	}

	viper.AutomaticEnv() // read in environment variables that match

	log.Debug("reading config file")

	// If a config file is found, read it in.
	if err := viper.ReadInConfig(); err != nil {
		log.Warnf("failed to read config file: %s: %s", viper.ConfigFileUsed(), err)
		if err := viper.WriteConfigAs(home + "/.spinup.json"); err != nil {
			log.Fatalf("unable to save config file: %s", err)
		}
	} else {
		log.Debugf("Using config file: %s", viper.ConfigFileUsed())
	}
}

================
File: cli/update_container.go
================
package cli

import (
	"bufio"
	"encoding/json"
	"errors"
	"os"

	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

var (
	redeployContainerCmd bool
	scaleContainerCmd    int64
)

func init() {
	updateCmd.AddCommand(updateContainerCmd)
	updateContainerCmd.PersistentFlags().BoolVarP(&redeployContainerCmd, "redeploy", "r", false, "Redeploy with the current configuraiton.")
	updateContainerCmd.PersistentFlags().Int64Var(&scaleContainerCmd, "scale", 0, "Scale the container service")
}

var updateContainerCmd = &cobra.Command{
	Use:     "container [name]",
	Short:   "Update a container service",
	PreRunE: updateCmdPreRun,
	RunE: func(cmd *cobra.Command, args []string) error {
		log.Infof("update container: %+v", args)

		if updateResource == nil {
			return errors.New("no resource provided")
		}

		var j []byte
		var err error

		if cmd.Flags().Changed("scale") {
			if j, err = scaleContainer(updateParams, updateResource, scaleContainerCmd, redeployContainerCmd); err != nil {
				return err
			}
		} else if redeployContainerCmd {
			if j, err = redeployContainer(updateParams, updateResource); err != nil {
				return err
			}
		}

		f := bufio.NewWriter(os.Stdout)
		defer f.Flush()
		f.Write(j)

		return nil
	},
}

func redeployContainer(params map[string]string, resource *spinup.Resource) ([]byte, error) {
	input, err := json.Marshal(map[string]bool{"only_redeploy": true})
	if err != nil {
		return []byte{}, err
	}

	log.Debugf("putting input: %s", string(input))

	info := &spinup.ContainerService{}
	if err = SpinupClient.PutResource(params, input, info); err != nil {
		return []byte{}, err
	}

	return []byte("OK\n"), nil
}

func scaleContainer(params map[string]string, resource *spinup.Resource, scale int64, force bool) ([]byte, error) {
	log.Infof("scaling container service to %d", scale)

	input, err := json.Marshal(spinup.ContainerServiceWrapperUpdateInput{
		Size: resource.SizeID,
		Service: &spinup.ContainerServiceUpdateInput{
			CapacityProviderStrategy: []*spinup.CapacityProviderStrategyInput{
				{
					Base:             1,
					CapacityProvider: "FARGATE_SPOT",
					Weight:           1,
				},
			},
			DesiredCount:    scale,
			PlatformVersion: "LATEST",
		},
		ForceRedeploy: force,
	})
	if err != nil {
		return []byte{}, err
	}

	log.Debugf("putting input: %s", string(input))

	info := &spinup.ContainerService{}
	if err = SpinupClient.PutResource(params, input, info); err != nil {
		return []byte{}, err
	}

	return []byte("OK\n"), nil
}

================
File: cli/update_server.go
================
package cli

import (
	"errors"

	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
)

func updateServer(params map[string]string, resource *spinup.Resource) error {
	return errors.New("server updates are not currently supported")
}

================
File: cli/update_storage.go
================
package cli

import (
	"errors"

	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
)

func updateStorage(params map[string]string, resource *spinup.Resource) error {
	return errors.New("storage updates are not currently supported")
}

================
File: cli/update.go
================
package cli

import (
	"errors"
	"strings"
	"time"

	"github.com/YaleSpinup/spinup-cli/pkg/spinup"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

func init() {
	rootCmd.AddCommand(updateCmd)
}

var (
	updateParams   = map[string]string{}
	updateResource = &spinup.Resource{}
)

func updateCmdPreRun(cmd *cobra.Command, args []string) error {
	defer timeTrack(time.Now(), "updateCmdPreRun()")

	if len(args) == 0 {
		return errors.New("space/resource required")
	}

	parts := strings.Split(args[0], "/")
	switch len(parts) {
	case 2:
		updateParams["space"] = parts[0]
		updateParams["name"] = parts[1]
	case 1:
		log.Debug("space not found in input, finding resource in default spaces")

		if len(spinupSpaces) == 0 {
			return errors.New("space not passed and no default spaces found")
		}

		space, err := findResourceInSpaces(parts[0], spinupSpaces)
		if err != nil {
			return err
		}

		updateParams["space"] = space
		updateParams["name"] = parts[0]
	default:
		return errors.New("space/resource required")
	}

	// set the global updateResource to the passed resource
	if err := SpinupClient.GetResource(updateParams, updateResource); err != nil {
		return err
	}

	return nil
}

var updateCmd = &cobra.Command{
	Use:   "update [type] [space]/[resource]",
	Short: "Update a resource in a space",
}

================
File: cli/version.go
================
package cli

import (
	"fmt"

	"github.com/spf13/cobra"
)

type CmdVersion struct {
	AppVersion string
	BuildTime  string
	GitCommit  string
	GitRef     string
}

var (
	Version *CmdVersion
	long    bool

	versionCmd = &cobra.Command{
		Use:     "version",
		Aliases: []string{"vers"},
		Short:   "Display version information",
		RunE: func(_ *cobra.Command, args []string) error {
			if long {
				fmt.Printf("Toker version: %s\nBuildtime: %s\nGitCommit: %s\n", Version.AppVersion, Version.BuildTime, Version.GitCommit)
				return nil
			}

			fmt.Printf("%s\n", Version.AppVersion)
			return nil
		},
	}
)

func init() {
	versionCmd.Flags().BoolVarP(&long, "long", "l", false, "get more verbose version information")
	rootCmd.AddCommand(versionCmd)
}

================
File: cmd/spinup-cli/main.go
================
/*
Copyright © 2020 Yale University

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/
package main

import (
	"github.com/YaleSpinup/spinup-cli/cli"
)

var (
	version = "v0.0.0"
	date    = "unset"
	commit  = "unset"
)

func main() {
	cli.Version = &cli.CmdVersion{
		AppVersion: version,
		BuildTime:  date,
		GitCommit:  commit,
	}

	cli.Execute()
}

================
File: pkg/spinup/container.go
================
package spinup

import (
	"fmt"
	"strconv"
	"strings"

	log "github.com/sirupsen/logrus"
)

type ContainerCapacityProviderStrategyItem struct {
	Base             int
	CapacityProvider string
	Weight           int
}

type ContainerEvent struct {
	CreatedAt string
	ID        string
	Message   string
}

type ContainerHealthCheck struct {
	Command     []string `json:"command"`
	Interval    int64    `json:"interval"`
	Retries     int64    `json:"retries"`
	StartPeriod int64    `json:"startperiod"`
	Timeout     int64    `json:"timeout"`
}

type ContainerMountPoint struct {
	ContainerPath string `json:"containerpath"`
	ReadOnly      bool   `json:"readonly"`
	SourceVolume  string `json:"sourcevolume"`
}

type ContainerPortMapping struct {
	ContainerPort int64
	HostPort      int64
	Protocol      string
}

type ContainerEfsVolumeConfiguration struct {
	AuthorizationConfig struct {
		AccessPointId string
		Iam           string
	}
	FileSystemId          string
	RootDirectory         string
	TransitEncryption     string
	TransitEncryptionPort string
}

type ContainerVolume struct {
	EfsVolumeConfiguration *ContainerEfsVolumeConfiguration `json:",omitempty"`
	Host                   *struct{}                        `json:",omitempty"`
	Name                   string
}

type Container struct {
	ContainerArn      string
	Cpu               string
	ExitCode          string
	HealthStatus      string
	Image             string
	LastStatus        string
	Memory            string
	MemoryReservation string
	Name              string
	NetworkBindings   []struct {
		BindIP        string
		ContainerPort int64
		HostPort      int64
		Protocol      string
	}
	NetworkInterfaces []struct {
		AttachmentId       string
		Ipv6Address        string
		PrivateIpv4Address string
	}
	Reason    string
	RuntimeId string
	TaskArn   string
}

type ContainerTask struct {
	Failures []string
	Tasks    []struct {
		AvailabilityZone string
		Attachments      []struct {
			Details []*NameValue
			Id      string
			Status  string
			Type    string
		}
		CapacityProviderName  string
		ClusterArn            string
		Connectivity          string
		ConnectivityAt        string
		Containers            []*Container
		Cpu                   string
		CreatedAt             string
		DesiredStatus         string
		ExecutionStoppedAt    string
		Group                 string
		HealthStatus          string
		InferenceAccelerators []struct {
			DeviceName string
			DeviceType string
		}
		LastStatus        string
		LaunchType        string
		Memory            string
		Overrides         interface{}
		PlatformVersion   string
		PullStartedAt     string
		PullStoppedAt     string
		StartedAt         string
		StartedBy         string
		StopCode          string
		StoppedAt         string
		StoppedReason     string
		StoppingAt        string
		Tags              []*NameValue
		TaskArn           string
		TaskDefinitionArn string
		Version           int64
	}
}

type ContainerDefinition struct {
	Command   []string
	CPU       int64
	DependsOn []struct {
		Condition     string
		ContainerName string
	}
	DisableNetworking bool
	DnsSearchDomains  []string
	DnsServers        []string
	DockerLabels      map[string]string
	EntryPoint        []string
	Environment       []*NameValue
	Essential         bool
	HealthCheck       *ContainerHealthCheck
	Image             string
	Interactive       bool
	Links             []string
	// LinuxParameters *LinuxParameter
	LogConfiguration struct {
		LogDriver     string
		Options       map[string]string
		SecretOptions []*NameValueFrom
	}
	Memory                 int64
	MemoryReservation      int64
	MountPoints            []*ContainerMountPoint
	Name                   string
	PortMappings           []*ContainerPortMapping
	Privileged             bool
	PseudoTerminal         bool
	ReadonlyRootFilesystem bool
	RepositoryCredentials  struct {
		CredentialsParameter string
	}
	Secrets      []*NameValueFrom
	StartTimeout int64
	StopTimeout  int64
	Ulimits      []struct {
		HardLimit int64
		Name      string
		SoftLimit int64
	}
	User        string
	VolumesFrom []struct {
		ReadOnly        bool
		SourceContainer string
	}
	WorkingDirectory string
}

// ContainerService is a spinup container service
type ContainerService struct {
	CapacityProviderStrategy []*ContainerCapacityProviderStrategyItem
	ClusterArn               string
	CreatedAt                string
	DesiredCount             int64
	Events                   []*ContainerEvent
	LoadBalancers            []struct {
		ContainerName    string
		ContainerPort    int64
		LoadBalancerName string
		TargetGroupArn   string
	}
	NetworkConfiguration struct {
		AwsvpcConfiguration struct {
			AssignPublicIp string
			SecurityGroups []string
			Subnets        []string
		}
	}
	PendingCount       int64
	RoleArn            string
	RunningCount       int64
	SchedulingStrategy string
	ServiceArn         string
	ServiceEndpoint    string
	ServiceName        string
	ServiceRegistries  []struct {
		ContainerName string
		ContainerPort int64
		Port          int64
		RegistryArn   string
	}
	Status         string
	Tasks          []string
	TaskDefinition struct {
		Compatibilities      []string
		CPU                  string
		ContainerDefinitions []*ContainerDefinition
		Family               string
		Memory               string
		Revision             int64
		Status               string
		TaskDefinitionArn    string
		Volumes              []*ContainerVolume
	}
}

// GetEndpoint returns the endpoint to get details about a container service
func (c *ContainerService) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/containers/" + params["name"]
}

// ContainerSize is the size for a container satisfying the Size interface
type ContainerSize struct {
	*BaseSize
	CPU    string `json:"cpu"`
	Memory string `json:"memory"`
}

// ContainerSize returns ContainerSize
func (c *Client) ContainerSize(id string) (*ContainerSize, error) {
	size := &ContainerSize{}
	if err := c.GetResource(map[string]string{"id": id}, size); err != nil {
		return nil, err
	}

	if size.GetValue() != "" {
		v := strings.SplitN(size.GetValue(), "-", 2)
		c, err := strconv.ParseFloat(v[0], 64)
		if err != nil {
			return nil, err
		}

		m, err := strconv.ParseFloat(v[1], 64)
		if err != nil {
			return nil, err
		}

		size.CPU = fmt.Sprintf("%0.00f vCPU", c/1024)
		size.Memory = fmt.Sprintf("%0.00f GB", m/1024)
	}

	log.Debugf("returing container size %+v", size)

	return size, nil
}

// GetEndpoint returns the endpoint to get details about a container service task
func (c *ContainerTask) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/containers/" + params["name"] + "/tasks/" + params["taskId"]
}

type ContainerServiceWrapperUpdateInput struct {
	ForceRedeploy bool                         `json:"force_redeploy"`
	Service       *ContainerServiceUpdateInput `json:"service"`
	Size          *FlexInt                     `json:"size_id"`
}

type ContainerServiceUpdateInput struct {
	CapacityProviderStrategy []*CapacityProviderStrategyInput
	DesiredCount             int64
	PlatformVersion          string
}

type CapacityProviderStrategyInput struct {
	Base             int64
	CapacityProvider string
	Weight           int64
}

================
File: pkg/spinup/database.go
================
package spinup

import log "github.com/sirupsen/logrus"

type DatabaseInfo struct {
	Endpoint    string        `json:",omitempty"`
	DBClusters  []*DBCluster  `json:",omitempty"`
	DBInstances []*DBInstance `json:",omitempty"`
}

type DBCluster struct {
	AllocatedStorage           int64
	AutoMinorVersionUpgrade    bool
	AvailabilityZones          []string
	BackupRetentionPeriod      int64
	Capacity                   int64
	ClusterCreateTime          string
	DBClusterArn               string
	DBClusterIdentifier        string
	DbClusterResourceId        string
	EarliestRestorableTime     string
	Endpoint                   string
	Engine                     string
	EngineMode                 string
	EngineVersion              string
	HostedZoneId               string
	KmsKeyId                   string
	LatestRestorableTime       string
	MasterUsername             string
	MultiAZ                    bool
	PercentProgress            string
	Port                       int64
	PreferredBackupWindow      string
	PreferredMaintenanceWindow string
	ScalingConfigurationInfo   *DBScalingConfiguration
	Status                     string
	StorageEncrypted           bool
}

type DBScalingConfiguration struct {
	AutoPause             bool
	MaxCapacity           int64
	MinCapacity           int64
	SecondsUntilAutoPause int64
	TimeoutAction         string
}

type DBInstance struct {
	AllocatedStorage           int64
	AutoMinorVersionUpgrade    bool
	BackupRetentionPeriod      int64
	CACertificateIdentifier    string
	DBInstanceArn              string
	DBInstanceClass            string
	DBInstanceIdentifier       string
	DBInstanceStatus           string
	DBName                     string
	DbInstancePort             int64
	DbiResourceId              string
	Endpoint                   *DBInstanceEndpoint
	Engine                     string
	EngineVersion              string
	InstanceCreateTime         string
	Iops                       int64
	LatestRestorableTime       string
	LicenseModel               string
	ListenerEndpoint           string
	MasterUsername             string
	MultiAZ                    bool
	PreferredBackupWindow      string
	PreferredMaintenanceWindow string
	PubliclyAccessible         bool
	StorageEncrypted           bool
	StorageType                string
}

type DBInstanceEndpoint struct {
	Address      string
	HostedZoneId string
	Port         int64
}

// GetEndpoint gets the URL for server info
func (s *DatabaseInfo) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/databases/" + params["name"]
}

// DatabaseSize is the size for a database satisfying the Size interface
type DatabaseSize struct {
	*BaseSize
}

// DatabaseSize returns a DatabaseSize as a Size
func (c *Client) DatabaseSize(id string) (*DatabaseSize, error) {
	size := &DatabaseSize{}
	if err := c.GetResource(map[string]string{"id": id}, size); err != nil {
		return nil, err
	}

	log.Debugf("returning database size %+v", size)

	return size, nil
}

================
File: pkg/spinup/image.go
================
package spinup

import (
	"encoding/json"

	log "github.com/sirupsen/logrus"
)

// Image is a server image
type Image struct {
	Architecture string       `json:"architecture,omitempty"`
	CreatedAt    string       `json:"created_at,omitempty"`
	CreatedBy    string       `json:"created_by,omitempty"`
	Description  string       `json:"description,omitempty"`
	ID           string       `json:"id"`
	Name         string       `json:"name,omitempty"`
	ServerName   string       `json:"server_name,omitempty"`
	State        string       `json:"state,omitempty"`
	Status       string       `json:"status,omitempty"`
	Volumes      ImageVolumes `json:"volumes,omitempty"`
	Offering     *Offering    `json:"offering,omitempty"`
}

// Images is a list of server images
type Images []*Image

// GetEndpoint gets the endpoint UR for an image list
func (i *Images) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/images"
}

type ImageVolumes map[string]*ImageVolume
type ImageVolume struct {
	DeleteOnTermination bool   `json:"delete_on_termination"`
	Encrypted           bool   `json:"encrypted"`
	ID                  string `json:"snapshot_id,omitempty"`
	Size                int    `json:"volume_size,omitempty"`
	Type                string `json:"volume_type,omitempty"`
}

func (iv *ImageVolumes) UnmarshalJSON(b []byte) error {
	if *iv == nil {
		*iv = ImageVolumes{}
	}
	imageVolumes := *iv

	var volMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &volMap); err != nil {
		return err
	}

	for k, v := range volMap {
		if string(v) == "[]" {
			log.Debugf("skipping empty volume %s", k)
			continue
		}

		vol := ImageVolume{}
		if err := json.Unmarshal(v, &vol); err != nil {
			return err
		}

		imageVolumes[k] = &vol
	}

	return nil
}

================
File: pkg/spinup/offering.go
================
package spinup

// Offering is the Spinup representation of an offering (or type)
type Offering struct {
	Beta              *FlexBool `json:"beta,omitempty"`
	CreatedAt         string    `json:"created_at,omitempty"`
	DefaultDiskSize   *FlexInt  `json:"default_disk_size,omitempty"`
	DeletedAt         string    `json:"deleted_at,omitempty"`
	Details           string    `json:"details,omitempty"`
	Flavor            string    `json:"flavor"`
	ID                *FlexInt  `json:"id"`
	Image             string    `json:"image,omitempty"`
	ImageOwner        string    `json:"image_owner,omitempty"`
	ImageSearchString string    `json:"search_string,omitempty"`
	Logo              string    `json:"logo,omitempty"`
	MinDiskSize       *FlexInt  `json:"min_disk_size,omitempty"`
	Name              string    `json:"name"`
	NameBroker        string    `json:"name_broker,omitempty"`
	Options           string    `json:"options,omitempty"`
	ProductCode       string    `json:"product_code,omitempty"`
	Provider          string    `json:"provider,omitempty"`
	ProviderBroker    string    `json:"provider_name,omitempty"`
	Security          string    `json:"security,omitempty"`
	SecurityGroup     string    `json:"sgs,omitempty"`
	Subnet            string    `json:"subnet,omitempty"`
	Type              string    `json:"type"`
	UpdatedAt         string    `json:"updated_at,omitempty"`
	UserData          string    `json:"userdata,omitempty"`
}

================
File: pkg/spinup/resource.go
================
package spinup

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"
)

// Resource is a specific resource in the database, it represents an actual instance, container, s3 bucket, etc
type Resource struct {
	Admin      string    `json:"admin,omitempty"`
	CreatedAt  string    `json:"created_at"`
	DeletedAt  string    `json:"deleted_at,omitempty"`
	TypeName   string    `json:"type_name"`
	TypeCat    string    `json:"type_category"`
	TypeFlavor string    `json:"type_flavor"`
	ID         *FlexInt  `json:"id"`
	IP         string    `json:"ip,omitempty"`
	IsA        string    `json:"is_a,omitempty"`
	Name       string    `json:"name"`
	ServerID   string    `json:"server_id,omitempty"`
	SizeID     *FlexInt  `json:"size_id,omitempty"`
	SpaceID    *FlexInt  `json:"-"`
	SpaceName  string    `json:"space_name"`
	Space      *Space    `json:"-"`
	Status     string    `json:"status"`
	TypeID     *FlexInt  `json:"-"`
	Task       string    `json:"-"`
	Type       *Offering `json:"type,omitempty"`
	UpdatedAt  string    `json:"updated_at,omitempty"`
}

// GetEndpoint returns the URL to get a resource
func (r *Resource) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/resources/" + params["name"]
}

// Resources gets the resources from a space
func (c *Client) Resources(space string) ([]*Resource, error) {
	endpoint := BaseURL + SpaceURI + "/" + space
	log.Infof("getting resources from endpoint: %s", endpoint)

	req, err := http.NewRequest(http.MethodGet, endpoint, nil)
	if err != nil {
		return nil, fmt.Errorf("failed creating get request for space %s: %s", space, err)
	}

	req.Header.Set("Content-Type", "application/json")

	if c.AuthToken != "" {
		log.Debugf("setting authorization bearer header")
		req.Header.Set("Authorization", "Bearer "+c.AuthToken)
	}

	res, err := c.HTTPClient.Do(req)
	if err != nil {
		return nil, errors.Wrap(err, "failed getting space "+space)
	}

	if res.StatusCode >= 400 {
		return nil, errors.New("error getting space details: " + res.Status)
	}

	log.Infof("got success response from api %s", res.Status)

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, errors.Wrap(err, "failed reading space body")
	}
	defer res.Body.Close()

	log.Debugf("got response body: %s", string(body))

	output := new(struct {
		Resources []*Resource `json:"resources"`
	})
	err = json.Unmarshal(body, &output)
	if err != nil {
		return nil, errors.Wrap(err, "failed unmarshalling resources body from json")
	}

	// add space name to return value
	for _, r := range output.Resources {
		r.SpaceName = space
	}

	log.Debugf("decoded output: %+v", output)
	return output.Resources, nil
}

================
File: pkg/spinup/secret.go
================
package spinup

type Secret struct {
	ARN              string
	Name             string
	Description      string
	KeyId            string
	Type             string
	LastModifiedDate string
	Version          int64
}

type SecretName string
type Secrets []SecretName

type SecretInput struct {
	Name        string `json:"name"`
	Value       string `json:"value"`
	Description string `json:"description,omitempty"`
}

// GetEndpoint returns the endpoint to get details about a secret
func (s *Secret) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/secrets/" + params["secretname"]
}

// GetEndpoint returns the endpoint to get a list of secrets in a space
func (s *Secrets) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/secrets"
}

================
File: pkg/spinup/server.go
================
package spinup

import (
	"fmt"
	"strconv"
	"strings"

	log "github.com/sirupsen/logrus"
)

// ServerInfo is the details about a server resource, filled in by fetching data from the backend APIs
type ServerInfo struct {
	ID               string                     `json:"id"`
	Name             string                     `json:"name"`
	Type             string                     `json:"type"`
	Image            string                     `json:"image"`
	IP               string                     `json:"ip"`
	Key              string                     `json:"key,omitempty"`
	Subnet           string                     `json:"subnet"`
	Tags             []map[string]string        `json:"tags,omitempty"`
	SecurityGroups   []map[string]string        `json:"sgs"`
	State            string                     `json:"state"`
	AvailabilityZone string                     `json:"az"`
	Platform         string                     `json:"platform,omitempty"`
	CreatedAt        string                     `json:"created_at,omitempty"`
	CreatedBy        string                     `json:"created_by,omitempty"`
	Volumes          map[string]*DiskAttachment `json:"volumes,omitempty"`
}

// DiskAttachment is the details about a disk/volumes attachment to an instance
type DiskAttachment struct {
	AttachTime          string `json:"attach_time"`
	DeleteOnTermination bool   `json:"delete_on_termination"`
	Device              string `json:"device,omitempty"`
	InstanceID          string `json:"instance_id,omitempty"`
	State               string `json:"state,omitempty"`
	Status              string `json:"status,omitempty"`
}

// Disk is a volume
type Disk struct {
	ID          string          `json:"id"`
	CreatedAt   string          `json:"created_at"`
	Encrypted   bool            `json:"encrypted"`
	Size        int             `json:"size"`
	VolumeType  string          `json:"volume_type,omitempty"`
	Attachments *DiskAttachment `json:"attachments,omitempty"`
}

// Disksis a list of disks/volumes
type Disks []*Disk

// Snapshot is a snapshot of a volume
type Snapshot struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	CreatedAt string `json:"created_at"`
	Encrypted bool   `json:"encrypted"`
	Progress  string `json:"progress,omitempty"`
	State     string `json:"state,omitempty"`
	VolumeID  string `json:"volume_id,omitempty"`
}

// Snapshots is a list of snapshots
type Snapshots []*Snapshot

// ServerSize is the size for a server satisfying the Size interface
type ServerSize struct {
	*BaseSize
	CPU    string `json:"cpu"`
	Memory string `json:"memory"`
}

// GetEndpoint gets the URL for server info
func (s *ServerInfo) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/resources/" + params["name"] + "/info"
}

// GetEndpoint gets the URL for server disks
func (s *Disks) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/servers/" + params["name"] + "/disks"
}

// GetEndpoint gets the URL for server snapshots
func (s *Snapshots) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/servers/" + params["name"] + "/snapshots"
}

// ServerSize returns a ServerSize as a Size
func (c *Client) ServerSize(id string) (*ServerSize, error) {
	size := &ServerSize{}
	if err := c.GetResource(map[string]string{"id": id}, size); err != nil {
		return nil, err
	}

	if size.GetValue() != "" {
		v := strings.SplitN(size.GetValue(), "-", 2)
		c, err := strconv.ParseFloat(v[0], 64)
		if err != nil {
			return nil, err
		}

		m, err := strconv.ParseFloat(v[1], 64)
		if err != nil {
			return nil, err
		}

		size.CPU = fmt.Sprintf("%0.00f vCPU", c/1024)
		size.Memory = fmt.Sprintf("%0.00f GB", m/1024)
	}

	log.Debugf("returning server size %+v", size)

	return size, nil
}

================
File: pkg/spinup/size.go
================
package spinup

import (
	"encoding/json"
	"fmt"
	"io/ioutil"

	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"
)

// BaseSize contains the basic size information for all sizes
type BaseSize struct {
	ID      *FlexInt `json:"id"`
	Name    string   `json:"name"`
	TypeID  *FlexInt `json:"type_id"`
	Value   string   `json:"value"`
	Details string   `json:"details"`
	Price   string   `json:"price"`
}

// Size is an interface that describes a Spinup size
type Size interface {
	GetName() string
	GetValue() string
	GetPrice() string
}

func (c *Client) Size(id string) (Size, error) {
	endpoint := BaseURL + SizeURI + "/" + id
	log.Infof("getting resource from endpoint: %s", endpoint)

	res, err := c.HTTPClient.Get(endpoint)
	if err != nil {
		return nil, errors.Wrap(err, "failed getting size "+id)
	}

	if res.StatusCode >= 400 {
		msg := fmt.Sprintf("error getting size (ID: %s): %s", id, res.Status)
		return nil, errors.New(msg)
	}

	log.Infof("got success response from api %s", res.Status)

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return nil, errors.Wrap(err, "failed reading size body")
	}
	defer res.Body.Close()

	log.Debugf("got response body: %s", string(body))

	size := BaseSize{}
	err = json.Unmarshal(body, &size)
	if err != nil {
		return nil, errors.Wrap(err, "failed unmarshalling size response body from json")
	}

	log.Debugf("decoded output: %+v", size)

	return &size, nil
}

func (s *BaseSize) GetEndpoint(params map[string]string) string {
	return BaseURL + SizeURI + "/" + params["id"]
}

func (s *BaseSize) GetName() string {
	return s.Name
}

func (s *BaseSize) GetValue() string {
	return s.Value
}

func (s *BaseSize) GetPrice() string {
	return s.Price
}

================
File: pkg/spinup/space_test.go
================
package spinup

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"reflect"
	"strconv"
	"strings"
	"testing"
)

func TestSpacesGetEndpoint(t *testing.T) {
	resource := Spaces{}
	expected := "http://localhost:8090/api/v3/spaces"

	if out := resource.GetEndpoint(map[string]string{}); out != expected {
		t.Errorf("expected %s, got %s", expected, out)
	}
}

func TestSpaceGetEndpoint(t *testing.T) {
	resource := Space{}
	expected := "http://localhost:8090/api/v3/spaces/123"

	if out := resource.GetEndpoint(map[string]string{"id": "123"}); out != expected {
		t.Errorf("expected %s, got %s", expected, out)
	}
}

func TestGetSpaceGetEndpoint(t *testing.T) {
	resource := GetSpace{}
	expected := "http://localhost:8090/api/v3/spaces/123"

	if out := resource.GetEndpoint(map[string]string{"id": "123"}); out != expected {
		t.Errorf("expected %s, got %s", expected, out)
	}
}

func TestSpaceCostGetEndpoint(t *testing.T) {
	resource := SpaceCosts{}
	expected := "http://localhost:8090/api/v3/spaces/123/cost"

	if out := resource.GetEndpoint(map[string]string{"id": "123"}); out != expected {
		t.Errorf("expected %s, got %s", expected, out)
	}
}

type mockResourceOutput struct {
	Resources []*Resource `json:"resources"`
}

var mockResourceList map[string]*mockResourceOutput

func newMockResourceOutput(spaceId, num int) *mockResourceOutput {
	resources := make([]*Resource, 0, num)
	for i := 0; i < num; i++ {
		fi := FlexInt(i)

		r := &Resource{
			ID:        &fi,
			Name:      fmt.Sprintf("resource-%0.3d", i),
			IsA:       "server",
			SpaceName: strconv.Itoa(spaceId),
		}
		resources = append(resources, r)
	}
	return &mockResourceOutput{
		Resources: resources,
	}
}

func MockResourcesHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte{})
		return
	}

	id := strings.TrimPrefix(r.URL.String(), "/api/v3/spaces/")
	if id == "" {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte{})
		return
	}

	mock, ok := mockResourceList[id]
	if !ok {
		w.WriteHeader(http.StatusNotFound)
		w.Write([]byte("Not Found"))
		return
	}

	if id == "brokenJSON" {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("{"))
		return
	}

	if id == "400error" {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	out, err := json.Marshal(mock)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte("failed to marshall json: " + err.Error()))
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(out)
}

func TestResources(t *testing.T) {
	ts := httptest.NewServer(http.HandlerFunc(MockResourcesHandler))
	defer ts.Close()

	t.Logf("created server listening on %s", ts.URL)

	client, err := New(ts.URL, http.DefaultClient, "token")
	if err != nil {
		t.Errorf("expected nil error, got %s", err)
	}

	mockResourceList = make(map[string]*mockResourceOutput)
	for i := 0; i < 100; i++ {
		spaceId := strconv.Itoa(i)
		mockResourceList[spaceId] = newMockResourceOutput(i, 100)
	}
	mockResourceList["brokenJSON"] = nil
	mockResourceList["400error"] = nil

	for i := 0; i < 10; i++ {
		spaceId := strconv.Itoa(i)

		t.Logf("getting resource id %d", i)

		out, err := client.Resources(spaceId)
		if err != nil {
			t.Errorf("expected nil error, got %s", err)
		}

		if !reflect.DeepEqual(mockResourceList[spaceId].Resources, out) {
			t.Error("expected:")
			for _, e := range mockResourceList[spaceId].Resources {
				t.Errorf("%+v (%s)\n", *e, reflect.TypeOf(*e))
			}

			t.Error("got:")
			for _, o := range out {
				t.Errorf("%+v (%s)\n", *o, reflect.TypeOf(*o))
			}
		}
	}

	if _, err := client.Resources("brokenJSON"); err == nil {
		t.Error("expected error for broken JSON, got nil")
	}

	if _, err := client.Resources("400error"); err == nil {
		t.Error("expected error for 400 error, got nil")
	}
}

================
File: pkg/spinup/space.go
================
package spinup

// Space holds details about a spinup space
type Space struct {
	Id             *FlexInt `json:"id"`
	Name           string   `json:"name,omitempty"`
	Owner          string   `json:"owner,omitempty"`
	Department     string   `json:"department,omitempty"`
	Contact        string   `json:"contact,omitempty"`
	QuestionaireID string   `json:"questid,omitempty"`
	SecurityGroup  string   `json:"sg,omitempty"`
	Security       string   `json:"security,omitempty"`
	DataTypes      []struct {
		Id   *FlexInt
		Name string
	} `json:"data_types,omitempty"`
	CreatedAt string      `json:"created_at,omitempty"`
	UpdatedAt string      `json:"updated_at,omitempty"`
	DeletedAt string      `json:"deleted_at,omitempty"`
	Mine      bool        `json:"mine,omitempty"`
	Resources []*Resource `json:"resources,omitempty"`
	Cost      *SpaceCosts `json:"cost,omitempty"`
}

// GetSpace is a space returned from a wonky endpoint
type GetSpace struct {
	Space *Space `json:"space"`
}

// Spaces is a list of spaces
type Spaces struct {
	Spaces []*Space `json:"spaces"`
}

// SoaceCost is the cost estimate for a space
type SpaceCost struct {
	Estimated  bool
	Groups     []string
	TimePeriod struct {
		Start string
		End   string
	}
	Total struct {
		BlendedCost   *CostValue
		UnblendedCost *CostValue
		UsageQuantity *CostValue
	}
}

// CostValue is the value returned for each type of cost
type CostValue struct {
	Amount string
	Unit   string
}

// SpaceCosts is the list of costs for a space
type SpaceCosts []*SpaceCost

// GetEndpoint returns the endpoint to get the list of spaces
func (s *Spaces) GetEndpoint(_ map[string]string) string {
	return BaseURL + SpaceURI
}

// GetEndpoint returns the endpoint to get details about a space
func (s *Space) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["id"]
}

// GetEndpoint returns the endpoint to get details about a space
func (s *GetSpace) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["id"]
}

// GetEndpoint returns the endpoint to get cost of a space
func (s *SpaceCosts) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["id"] + "/cost"
}

================
File: pkg/spinup/spinup_test.go
================
package spinup

import (
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"reflect"
	"strconv"
	"strings"
	"testing"

	"github.com/google/uuid"
)

func TestURIVars(t *testing.T) {
	if ContainerURI != "/api/v3/containers" {
		t.Errorf("unexpected ContainerURI %s", ContainerURI)
	}

	if ResourceURI != "/api/v3/resources" {
		t.Errorf("unexpected ResourceURI %s", ResourceURI)
	}

	if SecretsURI != "/api/v3/spaces" {
		t.Errorf("unexpected SecretsURI %s", SecretsURI)
	}

	if SizeURI != "/api/v3/sizes" {
		t.Errorf("unexpected SizeURI %s", SizeURI)
	}

	if SpaceURI != "/api/v3/spaces" {
		t.Errorf("unexpected SpaceURI %s", SpaceURI)
	}

	if StorageURI != "/api/v3/storage" {
		t.Errorf("unexpected StorageURI %s", StorageURI)
	}
}

type MockResourceInfo struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

var (
	MockInfoURI   = "/api/v3/mock"
	testMockInfos = map[string]MockResourceInfo{
		"0": {
			ID:   "0",
			Name: "copy",
		},
		"1": {
			ID:   "1",
			Name: "forgery",
		},
		"2": {
			ID:   "2",
			Name: "sham",
		},
		"3": {
			ID:   "3",
			Name: "fraud",
		},
		"4": {
			ID:   "4",
			Name: "hoax",
		},
		"5": {
			ID:   "5",
			Name: "dummy",
		},
		"6": {
			ID:   "6",
			Name: "lookalike",
		},
		"7": {
			ID:   "7",
			Name: "conterfeit",
		},
		"8": {
			ID:   "8",
			Name: "phoney",
		},
		"9": {
			ID:   "9",
			Name: "reproduction",
		},
	}
)

// GetEndpoint returns the url for a mock resource
func (m *MockResourceInfo) GetEndpoint(params map[string]string) string {
	return BaseURL + MockInfoURI + "/" + params["id"]
}
func MockResourceGetHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte{})
		return
	}

	id := strings.TrimPrefix(r.URL.String(), MockInfoURI+"/")
	if id == "" {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte{})
		return
	}

	mock, ok := testMockInfos[id]
	if !ok {
		w.WriteHeader(http.StatusNotFound)
		w.Write([]byte("Not Found"))
	}

	out, err := json.Marshal(mock)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte("failed to marshall json: " + err.Error()))
		return
	}

	http.SetCookie(w, &http.Cookie{
		Name:  "XSRF-TOKEN",
		Value: "foobar",
	})

	w.WriteHeader(http.StatusOK)
	w.Write(out)
}

func TestGetResource(t *testing.T) {
	ts := httptest.NewServer(http.HandlerFunc(MockResourceGetHandler))
	defer ts.Close()

	t.Logf("created server listening on %s", ts.URL)

	client, err := New(ts.URL, http.DefaultClient, "token")
	if err != nil {
		t.Errorf("expected nil error, got %s", err)
	}

	for id, expected := range testMockInfos {
		output := MockResourceInfo{}
		if err := client.GetResource(map[string]string{"id": id}, &output); err != nil {
			t.Errorf("expected nil error, got %s", err)
		}

		if !reflect.DeepEqual(expected, output) {
			t.Errorf("expected '%+v', got '%+v'", expected, output)
		}

		if client.CSRFToken != "foobar" {
			t.Errorf("expected CSRF token to be set to 'foobar', got %s", client.CSRFToken)
		}
	}

	if err := client.GetResource(map[string]string{"id": "missing"}, &MockResourceInfo{}); err == nil {
		t.Error("expected error, got nil")
	}
}

func MockResourcePutHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPut {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte{})
		return
	}

	id := strings.TrimPrefix(r.URL.String(), MockInfoURI+"/")
	if id == "" {
		w.WriteHeader(http.StatusBadRequest)
		w.Write([]byte{})
		return
	}

	mock, ok := testMockInfos[id]
	if !ok {
		w.WriteHeader(http.StatusNotFound)
		w.Write([]byte("Not Found"))
	}

	out, err := json.Marshal(mock)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte("failed to marshall json: " + err.Error()))
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(out)
}

func TestPutResource(t *testing.T) {
	ts := httptest.NewServer(http.HandlerFunc(MockResourcePutHandler))
	defer ts.Close()

	t.Logf("created server listening on %s", ts.URL)

	client, err := New(ts.URL, http.DefaultClient, "token")
	if err != nil {
		t.Errorf("expected nil error, got %s", err)
	}
	client.CSRFToken = "foobar"

	for id, expected := range testMockInfos {
		input, _ := json.Marshal(expected)
		output := MockResourceInfo{}
		if err := client.PutResource(map[string]string{"id": id}, input, &output); err != nil {
			t.Errorf("expected nil error, got %s", err)
		}
	}

	if err := client.GetResource(map[string]string{"id": "missing"}, &MockResourceInfo{}); err == nil {
		t.Error("expected error, got nil")
	}
}

func TestNew(t *testing.T) {
	expected := &Client{
		HTTPClient: http.DefaultClient,
		AuthToken:  "token",
	}
	spinupUrl := "https://spinup.example.com"

	output, err := New(spinupUrl, expected.HTTPClient, "token")
	if err != nil {
		t.Errorf("expected nil error, got %s", err)
	}

	if cType := reflect.TypeOf(output).String(); cType != "*spinup.Client" {
		t.Errorf("expected a new '*spinup.Client', got '%s'", cType)
	}

	if !reflect.DeepEqual(expected, output) {
		t.Errorf("expected '%+v', got '%+v'", expected, output)
	}

	if BaseURL != spinupUrl {
		t.Errorf("expected BaseURL to be set to '%s', got '%s'", spinupUrl, BaseURL)
	}

	// TODO find a URL that throws an error
	// if _, err := New("⌘", expected.HTTPClient); err == nil {
	// 	t.Error("expected error, got nil")
	// }
}

func TestFlexIntUnmarshallJSON(t *testing.T) {
	expectedInts := map[int]FlexInt{}
	for i := 0; i <= 100; i += 1 {
		expectedInts[i] = FlexInt(i)
	}

	for i, fi := range expectedInts {
		out := FlexInt(0)
		if err := out.UnmarshalJSON([]byte(strconv.Itoa(i))); err != nil {
			t.Errorf("expected nil error, got %s", err)
		}

		if out != fi {
			t.Errorf("expected %+v, got %+v", fi, out)
		}
	}

	expectedStrings := map[string]FlexInt{}
	for i, fi := range expectedInts {
		s := strconv.Itoa(i)
		expectedStrings[s] = fi
	}

	for s, fi := range expectedStrings {
		out := FlexInt(0)
		if err := out.UnmarshalJSON([]byte(s)); err != nil {
			t.Errorf("expected nil error, got %s", err)
		}

		if out != fi {
			t.Errorf("expected %+v, got %+v", fi, out)
		}
	}

	expectedErrs := []string{"1foo", "2foo", "3foo", "4foo", "5foo"}
	for _, s := range expectedErrs {
		out := FlexInt(0)
		if err := out.UnmarshalJSON([]byte(s)); err == nil {
			t.Errorf("expected error for input %s, got nil", s)
		}
	}
}

func TestFlexIntString(t *testing.T) {
	expectedStrings := map[string]FlexInt{}
	for i := 0; i <= 100; i += 1 {
		s := strconv.Itoa(i)
		expectedStrings[s] = FlexInt(i)
	}

	for s, fi := range expectedStrings {
		if fis := fi.String(); s != fis {
			t.Errorf("expected %s, got %s", s, fis)
		}
	}
}

func TestFlexBoolUnmarshall(t *testing.T) {
	ft := FlexBool(true)
	ff := FlexBool(false)

	var out FlexBool
	if err := out.UnmarshalJSON([]byte("false")); err != nil {
		t.Errorf("got unexpected error %s", err)
	}

	if out != ff {
		t.Error("expected false")
	}

	if err := out.UnmarshalJSON([]byte("true")); err != nil {
		t.Errorf("got unexpected error %s", err)
	}

	if out != ft {
		t.Error("expected true")
	}
}

func TestFlexBoolBool(t *testing.T) {
	ft := FlexBool(true)
	if ft.Bool() != true {
		t.Error("expected true")
	}

	ff := FlexBool(false)
	if ff.Bool() != false {
		t.Error("expected false")
	}
}

func TestFlexBoolString(t *testing.T) {
	ft := FlexBool(true)
	if ft.String() != "true" {
		t.Error("expected true")
	}

	ff := FlexBool(false)
	if ff.String() != "false" {
		t.Error("expected false")
	}
}

func TestNameValueString(t *testing.T) {
	tests := []NameValue{}
	for i := 0; i < 100; i++ {
		u, _ := uuid.NewRandom()
		name := u.String()

		s := sha256.Sum256([]byte(name))
		value := hex.EncodeToString(s[:])

		tests = append(tests, NameValue{Name: name, Value: value})
	}

	for _, test := range tests {
		expected := fmt.Sprintf("%s:%s", test.Name, test.Value)
		if out := test.String(); out != expected {
			t.Errorf("expected %s, got %s", expected, out)
		}
	}
}

func TestNameValueFromString(t *testing.T) {
	tests := []NameValueFrom{}
	for i := 0; i < 100; i++ {
		u, _ := uuid.NewRandom()
		name := u.String()

		s := sha256.Sum256([]byte(name))
		valueFrom := hex.EncodeToString(s[:])

		tests = append(tests, NameValueFrom{Name: name, ValueFrom: valueFrom})
	}

	for _, test := range tests {
		expected := fmt.Sprintf("%s:%s", test.Name, test.ValueFrom)
		if out := test.String(); out != expected {
			t.Errorf("expected %s, got %s", expected, out)
		}
	}
}

================
File: pkg/spinup/spinup.go
================
package spinup

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/http/httputil"
	"net/url"
	"strconv"
	"strings"
	"time"

	log "github.com/sirupsen/logrus"
)

var (
	BaseURL      = "http://localhost:8090"
	DatabaseURI  = "/api/v3/databases"
	ContainerURI = "/api/v3/containers"
	ResourceURI  = "/api/v3/resources"
	SecretsURI   = "/api/v3/spaces"
	SizeURI      = "/api/v3/sizes"
	SpaceURI     = "/api/v3/spaces"
	StorageURI   = "/api/v3/storage"
)

// FlexInt is an int... or a string... or an int.... or...
type FlexInt int

// FlexBool is a bool... or a stirng... or an int... or...
type FlexBool bool

// Client is the spinup client
type Client struct {
	AuthToken  string
	CSRFToken  string
	HTTPClient *http.Client
}

// NameValue is the ubuquitous Name/Value struct
type NameValue struct {
	Name  string
	Value string
}

// NameValueFrom is a Name/ValueFrom struct
type NameValueFrom struct {
	Name      string
	ValueFrom string
}

// ResourceType is an interface for deteriming URLs
type ResourceType interface {
	GetEndpoint(params map[string]string) string
}

func New(spinupUrl string, client *http.Client, token string) (*Client, error) {
	u, err := url.Parse(spinupUrl)
	if err != nil {
		return nil, err
	}

	BaseURL = u.String()
	return &Client{
		AuthToken: token,
		// BaseURL:    u,
		HTTPClient: client,
	}, nil
}

// GetResource gets details about a resource and unmarshals them them into the passed
// ResourceType.  It first gets the resource endpoint by calling r.GetEndpoint(id) which
// is a function on the passed ResourceType interface.
func (c *Client) GetResource(params map[string]string, r ResourceType) error {
	defer timeTrack(time.Now(), "GetResource()")

	endpoint := r.GetEndpoint(params)
	log.Infof("getting resource from endpoint: %s", endpoint)

	req, err := http.NewRequest(http.MethodGet, endpoint, nil)
	if err != nil {
		return fmt.Errorf("failed creating get resource request with params %+v: %s", params, err)
	}

	req.Header.Set("Content-Type", "application/json")

	if c.AuthToken != "" {
		log.Debugf("setting authorization bearer header")
		req.Header.Set("Authorization", "Bearer "+c.AuthToken)
	}

	res, err := c.HTTPClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed getting resource with params %+v: %s", params, err)
	}

	if res.StatusCode >= 400 {
		return fmt.Errorf("error getting resource details: %s", res.Status)
	}

	log.Infof("got success response from api %s", res.Status)

	if log.GetLevel() == log.DebugLevel {
		dump, err := httputil.DumpResponse(res, true)
		if err != nil {
			log.Fatal(err)
		}

		log.Debugf("response: %s", string(dump))
	}

	for _, cookie := range res.Cookies() {
		if cookie.Name == "XSRF-TOKEN" {
			log.Debugf("found xsrf-token: %+v", cookie)

			decodedValue, err := url.QueryUnescape(cookie.Value)
			if err != nil {
				return err
			}

			log.Debugf("XSRF-TOKEN cookie %+v", decodedValue)
			c.CSRFToken = decodedValue
		}
	}

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return fmt.Errorf("failed reading resource body: %s", err)
	}
	defer res.Body.Close()

	log.Debugf("read response body: %s", string(body))

	err = json.Unmarshal(body, r)
	if err != nil {
		return fmt.Errorf("failed unmarshalling resource body from json: %s", err)
	}

	log.Debugf("decoded output: %+v", r)

	return nil
}

// PutResources updates a resource
func (c *Client) PutResource(params map[string]string, input []byte, r ResourceType) error {
	defer timeTrack(time.Now(), "PutResource()")

	endpoint := r.GetEndpoint(params)
	log.Infof("putting resource to endpoint: %s", endpoint)

	req, err := http.NewRequest(http.MethodPut, endpoint, bytes.NewBuffer(input))
	if err != nil {
		return fmt.Errorf("failed creating update request with params %+v, %s: %s", params, string(input), err)
	}

	req.Header.Set("Content-Type", "application/json")

	if c.AuthToken != "" {
		log.Debugf("setting authorization bearer header")
		req.Header.Set("Authorization", "Bearer "+c.AuthToken)
	}

	res, err := c.HTTPClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed updating resource with params %+v, %s: %s", params, string(input), err)
	}

	if res.StatusCode >= 400 {
		return fmt.Errorf("error updating resource: %s", res.Status)
	}

	log.Infof("got success response from api %s", res.Status)

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return fmt.Errorf("failed reading resource body: %s", err)
	}
	defer res.Body.Close()

	log.Debugf("got response body: %s", string(body))

	return nil
}

// PostResource creates a resource
func (c *Client) PostResource(params map[string]string, input []byte, r ResourceType) error {
	defer timeTrack(time.Now(), "PostResource()")

	endpoint := r.GetEndpoint(params)
	log.Infof("posting resource to endpoint: %s", endpoint)

	req, err := http.NewRequest(http.MethodPost, endpoint, bytes.NewBuffer(input))
	if err != nil {
		return fmt.Errorf("failed creating create request with params %+v, %s: %s", params, string(input), err)
	}

	req.Header.Set("Content-Type", "application/json")

	if c.AuthToken != "" {
		log.Debugf("setting authorization bearer header")
		req.Header.Set("Authorization", "Bearer "+c.AuthToken)
	}

	res, err := c.HTTPClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed creating resource with params %+v, %s: %s", params, string(input), err)
	}

	if res.StatusCode >= 400 {
		return fmt.Errorf("error creating resource: %s", res.Status)
	}

	log.Infof("got success response from api %s", res.Status)

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return fmt.Errorf("failed reading resource body: %s", err)
	}
	defer res.Body.Close()

	log.Debugf("got response body: %s", string(body))

	return nil
}

func (fi *FlexInt) UnmarshalJSON(b []byte) error {
	// if b is not a string, it's an int
	if b[0] != '"' {
		return json.Unmarshal(b, (*int)(fi))
	}
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}
	i, err := strconv.Atoi(s)
	if err != nil {
		return err
	}
	*fi = FlexInt(i)
	return nil
}

// func (fi *FlexInt) MarshalJSON() ([]byte, error) {
// 	return []byte(fi.String()), nil
// }

func (fi *FlexInt) String() string {
	log.Debugf("converting flex int to string: %v", *fi)
	return strconv.Itoa(int(*fi))
}

func (fb *FlexBool) UnmarshalJSON(b []byte) error {
	s := strings.Trim(string(b), `"`)
	sb, err := strconv.ParseBool(s)
	if err != nil {
		return err
	}
	*fb = FlexBool(sb)
	return nil
}

func (fb *FlexBool) Bool() bool {
	log.Debugf("converting flex bool to bool: %v", *fb)
	return bool(*fb)
}

func (fb *FlexBool) String() string {
	log.Debugf("converting flex bool to string: %v", *fb)
	return strconv.FormatBool(bool(*fb))
}

func (nv *NameValue) String() string {
	log.Debugf("returning name/value as string: %v", *nv)
	return fmt.Sprintf("%s:%s", nv.Name, nv.Value)
}

func (nv *NameValueFrom) String() string {
	log.Debugf("returning name/value from as string: %v", *nv)
	return fmt.Sprintf("%s:%s", nv.Name, nv.ValueFrom)
}

// timeTrack logs the time since the passed time
func timeTrack(start time.Time, name string) {
	elapsed := time.Since(start)
	log.Infof("%s took %s", name, elapsed)
}

================
File: pkg/spinup/storage.go
================
package spinup

import log "github.com/sirupsen/logrus"

// S3StorageInfo is the info about a S3 storage bucket
type S3StorageInfo struct {
	Empty bool
}

// S3StorageUsers is a list of storage users
type S3StorageUsers []*S3StorageUser

// S3StorageUser is a storage user
type S3StorageUser struct {
	Arn        string                    `json:"Arn"`
	Username   string                    `json:"UserName"`
	CreatedAt  string                    `json:"CreateDate"`
	LastUsed   string                    `json:"PasswordLastUsed"`
	AccessKeys []*S3StorageUserAccessKey `json:"AccessKeys"`
}

type S3StorageUserAccessKey struct {
	AccessKeyId string
	CreateDate  string
	Status      string
	UserName    string
}

// GetEndpoint returns the url for a storage resource
func (s *S3StorageInfo) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/storage/" + params["name"]
}

// S3StorageSize is the size for a container satisfying the Size interface
type S3StorageSize struct {
	*BaseSize
}

// S3StorageSize returns S3StorageSize as a Size
func (c *Client) S3StorageSize(id string) (*S3StorageSize, error) {
	size := &S3StorageSize{}
	if err := c.GetResource(map[string]string{"id": id}, size); err != nil {
		return nil, err
	}

	log.Debugf("returing s3 storage size %+v", size)

	return size, nil
}

// GetEndpoint returns the URL for the list of users of a storage resource
func (s *S3StorageUsers) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/storage/" + params["name"] + "/users"
}

// GetEndpoint returns the URL for the details about a user of a storage resource
func (s *S3StorageUser) GetEndpoint(params map[string]string) string {
	return BaseURL + SpaceURI + "/" + params["space"] + "/storage/" + params["name"] + "/users/" + params["username"]
}

================
File: .gitignore
================
.idea
.vscode

================
File: .goreleaser.yml
================
# Required version declaration for GoReleaser v2
version: 2

# Pre-build hooks remain the same
before:
  hooks:
    - go mod tidy

# Build configuration for the CLI
builds:
  - id: spinup-cli
    binary: spinup
    main: ./cmd/spinup-cli
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin

# Release settings with explicit mode
release:
  prerelease: auto
  name_template: "{{.ProjectName}}-v{{.Version}}"
  mode: replace

# Checksum configuration
checksum:
  name_template: 'checksums.txt'

# Changelog settings
changelog:
  sort: asc
  filters:
    exclude:
      - '^docs:'
      - '^test:'

# Homebrew formula configuration following v2 structure
brews:
  - name: spinup
    description: Simple command-line interface for spinup
    homepage: https://github.com/YaleSpinup/spinup-cli
    license: AGPL-3.0-or-later
    # Repository configuration is now more detailed
    repository:
      owner: yalespinup
      name: homebrew-tools
      branch: main
    # Formula directory specification
    directory: Formula
    # Installation script
    install: |
      bin.install "spinup"
    # Test script
    test: |
      system "#{bin}/spinup", "version"
    # Commit configuration
    commit_author:
      name: goreleaserbot
      email: bot@goreleaser.com

================
File: go.mod
================
module github.com/YaleSpinup/spinup-cli

go 1.22.0

toolchain go1.23.4

require (
	github.com/google/uuid v1.6.0
	github.com/mitchellh/go-homedir v1.1.0
	github.com/pkg/errors v0.9.1
	github.com/sirupsen/logrus v1.9.3
	github.com/spf13/cobra v1.8.1
	github.com/spf13/viper v1.19.0
	golang.org/x/net v0.33.0
)

require (
	github.com/fsnotify/fsnotify v1.8.0 // indirect
	github.com/hashicorp/hcl v1.0.0 // indirect
	github.com/inconshreveable/mousetrap v1.1.0 // indirect
	github.com/magiconair/properties v1.8.9 // indirect
	github.com/mitchellh/mapstructure v1.5.0 // indirect
	github.com/pelletier/go-toml/v2 v2.2.3 // indirect
	github.com/sagikazarmark/locafero v0.6.0 // indirect
	github.com/sagikazarmark/slog-shim v0.1.0 // indirect
	github.com/sourcegraph/conc v0.3.0 // indirect
	github.com/spf13/afero v1.11.0 // indirect
	github.com/spf13/cast v1.7.1 // indirect
	github.com/spf13/pflag v1.0.5 // indirect
	github.com/subosito/gotenv v1.6.0 // indirect
	go.uber.org/multierr v1.11.0 // indirect
	golang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67 // indirect
	golang.org/x/sys v0.28.0 // indirect
	golang.org/x/text v0.21.0 // indirect
	gopkg.in/ini.v1 v1.67.0 // indirect
	gopkg.in/yaml.v3 v3.0.1 // indirect
)

================
File: go.sum
================
github.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=
github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=
github.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=
github.com/fsnotify/fsnotify v1.8.0 h1:dAwr6QBTBZIkG8roQaJjGof0pp0EeF+tNV7YBP3F/8M=
github.com/fsnotify/fsnotify v1.8.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=
github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
github.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=
github.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=
github.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=
github.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
github.com/magiconair/properties v1.8.9 h1:nWcCbLq1N2v/cpNsy5WvQ37Fb+YElfq20WJ/a8RkpQM=
github.com/magiconair/properties v1.8.9/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=
github.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=
github.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=
github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=
github.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
github.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=
github.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=
github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=
github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=
github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
github.com/sagikazarmark/locafero v0.6.0 h1:ON7AQg37yzcRPU69mt7gwhFEBwxI6P9T4Qu3N51bwOk=
github.com/sagikazarmark/locafero v0.6.0/go.mod h1:77OmuIc6VTraTXKXIs/uvUxKGUXjE1GbemJYHqdNjX0=
github.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=
github.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=
github.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=
github.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=
github.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=
github.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=
github.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=
github.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=
github.com/spf13/cast v1.7.1 h1:cuNEagBQEHWN1FnbGEjCXL2szYEXqfJPbP2HNUaca9Y=
github.com/spf13/cast v1.7.1/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=
github.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=
github.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=
github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
github.com/spf13/viper v1.19.0 h1:RWq5SEjt8o25SROyN3z2OrDB9l7RPd3lwTWU8EcEdcI=
github.com/spf13/viper v1.19.0/go.mod h1:GQUN9bilAbhU/jgc1bKs99f/suXKeUMct8Adx5+Ntkg=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=
github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
github.com/subosito/gotenv v1.6.0 h1:9NlTDc1FTs4qu0DDq7AEtTPNw6SVm7uBMsUCUjABIf8=
github.com/subosito/gotenv v1.6.0/go.mod h1:Dk4QP5c2W3ibzajGcXpNraDfq2IrhjMIvMSWPKKo0FU=
go.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=
go.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN80Y=
golang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67 h1:1UoZQm6f0P/ZO0w1Ri+f+ifG/gXhegadRdwBIXEFWDo=
golang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67/go.mod h1:qj5a5QZpwLU2NLQudwIN5koi3beDhSAlJwa67PuM98c=
golang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=
golang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=
golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=
golang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
golang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=
golang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=
gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=
gopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=

================
File: LICENSE
================
GNU AFFERO GENERAL PUBLIC LICENSE
                       Version 3, 19 November 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
our General Public Licenses are intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  Developers that use our General Public Licenses protect your rights
with two steps: (1) assert copyright on the software, and (2) offer
you this License which gives you legal permission to copy, distribute
and/or modify the software.

  A secondary benefit of defending all users' freedom is that
improvements made in alternate versions of the program, if they
receive widespread use, become available for other developers to
incorporate.  Many developers of free software are heartened and
encouraged by the resulting cooperation.  However, in the case of
software used on network servers, this result may fail to come about.
The GNU General Public License permits making a modified version and
letting the public access it on a server without ever releasing its
source code to the public.

  The GNU Affero General Public License is designed specifically to
ensure that, in such cases, the modified source code becomes available
to the community.  It requires the operator of a network server to
provide the source code of the modified version running there to the
users of that server.  Therefore, public use of a modified version, on
a publicly accessible server, gives the public access to the source
code of the modified version.

  An older license, called the Affero General Public License and
published by Affero, was designed to accomplish similar goals.  This is
a different license, not a version of the Affero GPL, but Affero has
released a new version of the Affero GPL which permits relicensing under
this license.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU Affero General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Remote Network Interaction; Use with the GNU General Public License.

  Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software.  This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the work with which it is combined will remain governed by version
3 of the GNU General Public License.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU Affero General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU Affero General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source.  For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code.  There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU AGPL, see
<http://www.gnu.org/licenses/>.

================
File: README.md
================
# spinup

The spinup user interface in CLI form.  The interface takes on a git-like style and outputs JSON for easy consumption by computers and humans with computer brains.  To make the output more friendly to the masses, consider using [jq](https://stedolan.github.io/jq/).

---
[![goreleaser](https://github.com/YaleSpinup/spinup-cli/actions/workflows/releaser.yml/badge.svg)](https://github.com/YaleSpinup/spinup-cli/actions/workflows/releaser.yml)
[![tests](https://github.com/YaleSpinup/spinup-cli/actions/workflows/tests.yaml/badge.svg)](https://github.com/YaleSpinup/spinup-cli/actions/workflows/tests.yaml)
## Table of Contents

- [spinup](#spinup)
  - [Table of Contents](#table-of-contents)
  - [Getting Started](#getting-started)
    - [Download](#download)
    - [Running the command](#running-the-command)
  - [Configuration](#configuration)
    - [Configure with the configuration utility](#configure-with-the-configuration-utility)
  - [Get Commands](#get-commands)
  - [Update Commands](#update-commands)
    - [Containers](#containers)
      - [Redeploy](#redeploy)
      - [Scale](#scale)
  - [Author](#author)
  - [License](#license)

## Getting Started

Spinup is a cross-compiled static binary with support for many platforms.  Download an install the relevant binary for your system.

### Installation

#### MacOS
`spinup-cli` is available through Homebrew.

```sh
brew install yalespinup/tools/spinup
```

See https://github.com/YaleSpinup/homebrew-tools for more Spinup related CLI tools.

#### Linux
Download the precomplied and compressed binary from the [releases page](https://github.com/YaleSpinup/spinup-cli/releases). Decompress the file and move it to your preferred installation directory.

```sh
wget https://github.com/YaleSpinup/spinup-cli/releases/download/v0.4.10/spinup-cli_0.4.10_linux_amd64.tar.gz
tar -xz -f spinup-cli_0.4.10_linux_amd64.tar.gz
mv spinup /usr/local/bin/
sudo chown root:root /usr/local/bin/spinup
```

#### Windows
- TODO

### Running the command

```bash
# spinup help
A small CLI for interacting with Yale's Spinup service

Usage:
  spinup [command]

Available Commands:
  completion  generate the autocompletion script for the specified shell
  configure   Configure Spinup CLI
  get         Get information about a resource in a space
  help        Help about any command
  new         Create new resources
  update      Update a resource in a space
  version     Display version information about the spinup-cli.

Flags:
      --config string    config file (default is $HOME/.spinup.yaml)
      --debug            Enable debug logging
  -h, --help             help for spinup
  -s, --spaces strings   Default Space(s)
  -t, --token string     Spinup API Token
      --url string       The base url for Spinup
  -v, --verbose          Enable verbose logging

Use "spinup [command] --help" for more information about a command.
```

## Configuration

By default the configuration lives in ~/.spinup.{yml|json}.

All fields in the configuration can be overridden on the command line.  All fields in the configuration file are optional
and will act as defaults.  Most users will probably want the `url`, and `token`.

Supported configuration items:

| property | type         | description                 |
|:---------|:------------:|:---------------------------:|
| url      | string       | spinup url                  |
| token    | string       | spinup token                |
| spaces   | string array | default list of space names |

Example `~/.spinup.json`:

```json
{
  "url": "https://spinup.example.edu",
  "token": "xxxxxyyyyyyy",
  "spaces": ["my_space_1", "my_space_2"]
}
```

### Configure with the configuration utility

```bash
spinup configure
```

## Get Commands

The `get` subcommands allow you to get detailed information about spinup resources.

```bash
# spinup get --help
Get information about a resource in a space

Usage:
  spinup get [command]

Available Commands:
  container   Get a container service
  database    Get a container service
  images      Get a list of images for a space
  secrets     Get a list of secrets for a space
  server      Get a server service
  space       Get details about your space(s)
  spaces      Get a list of your space(s)
  storage     Get a storage service

Flags:
  -d, --details   Get detailed output about the resource
  -h, --help      help for get

Global Flags:
      --config string    config file (default is $HOME/.spinup.yaml)
      --debug            Enable debug logging
  -s, --spaces strings   Default Space(s)
  -t, --token string     Spinup API Token
      --url string       The base url for Spinup
  -v, --verbose          Enable verbose logging

Use "spinup get [command] --help" for more information about a command.
```
## Update Commands

The `update` subcommands allow you to make changes to an existing resource.  Currently only container updates are supported.

```bash
# spinup update --help
Update a resource in a space

Usage:
  spinup update [command]

Available Commands:
  container   Update a container service

Flags:
  -h, --help   help for update

Global Flags:
      --config string    config file (default is $HOME/.spinup.yaml)
      --debug            Enable debug logging
  -s, --spaces strings   Default Space(s)
  -t, --token string     Spinup API Token
      --url string       The base url for Spinup
  -v, --verbose          Enable verbose logging

Use "spinup update [command] --help" for more information about a command.
```

### Containers

#### Redeploy

Redeploy an existing container service, using the existing configuration and tag.  This will force the latest image with the defined tag to be pulled and redeployed.  Container (re)deployments are rolling.  This is useful if you have a tag that gets updated with the latest release and you want deploy that via an automated pipeline.

```bash
spinup update funSpace/spintst-000848-testService -r
```

```json
OK
```

#### Scale

Scale an existing container service, using the existing configuration and tag.  This will set the desired count to the passed value.  Values between 0 and 10 are supported.

```bash
spinup update container funSpace spintst-000848-testService --scale 2
```

```json
OK
```

## Author

* E Camden Fisher <camden.fisher@yale.edu>
* Brandon Tassone <brandon.tassone@yale.edu>

## License

GNU Affero General Public License v3.0 (GNU AGPLv3)
Copyright (c) 2021 Yale University
